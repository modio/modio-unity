// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;
using Modio.Extensions;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Me
        {
            /// <summary>Get all games the _authenticated user_ added or is a team member of. Successful request will return an array of [Game Objects](#get-games-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken gameObjects)> GetUserGamesAsJToken(
            GetUserGamesFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/games", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all games the _authenticated user_ added or is a team member of. Successful request will return an array of [Game Objects](#get-games-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<GameObject[]>? gameObjects)> GetUserGames(
            GetUserGamesFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/games", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<Pagination<GameObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetUserGamesFilter FilterGetUserGames(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetUserGamesFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetUserGames, see <see cref="Me.FilterGetUserGames"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetUserGamesFilter : SearchFilter<GetUserGamesFilter>
            {
                internal GetUserGamesFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="status">Status of the game (only admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not Accepted<br/>__1__ = Accepted<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Status(long status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }

                /// <param name="status">An ICollection of Status of the game (only admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not Accepted<br/>__1__ = Accepted<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Status(ICollection<long> status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }
                

                /// <param name="submittedBy">Unique id of the user who has ownership of the game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter SubmittedBy(long submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }

                /// <param name="submittedBy">An ICollection of Unique id of the user who has ownership of the game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter SubmittedBy(ICollection<long> submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date game was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date game was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="dateUpdated">Unix timestamp of date game was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DateUpdated(long dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateUpdated">An ICollection of Unix timestamp of date game was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DateUpdated(ICollection<long> dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="dateLive">Unix timestamp of date game was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DateLive(long dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateLive">An ICollection of Unix timestamp of date game was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DateLive(ICollection<long> dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="name">Name of the game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Name(string name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }

                /// <param name="name">An ICollection of Name of the game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Name(ICollection<string> name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }
                

                /// <param name="nameId">Path for the game on mod.io. For example: https://mod.io/g/gamename</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter NameId(string nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }

                /// <param name="nameId">An ICollection of Path for the game on mod.io. For example: https://mod.io/g/gamename</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter NameId(ICollection<string> nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }
                

                /// <param name="summary">Summary of the games mod support.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Summary(string summary, Filtering condition = Filtering.None)
                {
                    Parameters[$"summary{condition.ClearText()}"] = summary;
                    return this;
                }

                /// <param name="summary">An ICollection of Summary of the games mod support.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter Summary(ICollection<string> summary, Filtering condition = Filtering.None)
                {
                    Parameters[$"summary{condition.ClearText()}"] = summary;
                    return this;
                }
                

                /// <param name="instructionsUrl">Link to a mod.io guide, modding wiki or a page where modders can learn how to make and submit mods.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter InstructionsUrl(string instructionsUrl, Filtering condition = Filtering.None)
                {
                    Parameters[$"instructions_url{condition.ClearText()}"] = instructionsUrl;
                    return this;
                }

                /// <param name="instructionsUrl">An ICollection of Link to a mod.io guide, modding wiki or a page where modders can learn how to make and submit mods.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter InstructionsUrl(ICollection<string> instructionsUrl, Filtering condition = Filtering.None)
                {
                    Parameters[$"instructions_url{condition.ClearText()}"] = instructionsUrl;
                    return this;
                }
                

                /// <param name="ugcName">Word used to describe user-generated content (mods, items, addons etc).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter UgcName(string ugcName, Filtering condition = Filtering.None)
                {
                    Parameters[$"ugc_name{condition.ClearText()}"] = ugcName;
                    return this;
                }

                /// <param name="ugcName">An ICollection of Word used to describe user-generated content (mods, items, addons etc).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter UgcName(ICollection<string> ugcName, Filtering condition = Filtering.None)
                {
                    Parameters[$"ugc_name{condition.ClearText()}"] = ugcName;
                    return this;
                }
                

                /// <param name="presentationOption">Presentation style used on the mod.io website:<br/><br/>__0__ = Grid View: Displays mods in a grid<br/>__1__ = Table View: Displays mods in a table</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter PresentationOption(long presentationOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"presentation_option{condition.ClearText()}"] = presentationOption;
                    return this;
                }

                /// <param name="presentationOption">An ICollection of Presentation style used on the mod.io website:<br/><br/>__0__ = Grid View: Displays mods in a grid<br/>__1__ = Table View: Displays mods in a table</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter PresentationOption(ICollection<long> presentationOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"presentation_option{condition.ClearText()}"] = presentationOption;
                    return this;
                }
                

                /// <param name="submissionOption">Submission process modders must follow:<br/><br/>__0__ = Mod uploads must occur via the API using a tool created by the game developers<br/>__1__ = Mod uploads can occur from anywhere, including the website and API</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter SubmissionOption(long submissionOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"submission_option{condition.ClearText()}"] = submissionOption;
                    return this;
                }

                /// <param name="submissionOption">An ICollection of Submission process modders must follow:<br/><br/>__0__ = Mod uploads must occur via the API using a tool created by the game developers<br/>__1__ = Mod uploads can occur from anywhere, including the website and API</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter SubmissionOption(ICollection<long> submissionOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"submission_option{condition.ClearText()}"] = submissionOption;
                    return this;
                }
                

                /// <param name="curationOption">Curation options enabled by this game to approve mods:<br/><br/>__0__ = No curation: Mods are immediately available to play<br/>__1__ = Price change approval: Pricing changes for marketplace mods queued for acceptance<br/>__2__ = Full curation: All mods must be accepted by someone to be listed</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter CurationOption(long curationOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"curation_option{condition.ClearText()}"] = curationOption;
                    return this;
                }

                /// <param name="curationOption">An ICollection of Curation options enabled by this game to approve mods:<br/><br/>__0__ = No curation: Mods are immediately available to play<br/>__1__ = Price change approval: Pricing changes for marketplace mods queued for acceptance<br/>__2__ = Full curation: All mods must be accepted by someone to be listed</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter CurationOption(ICollection<long> curationOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"curation_option{condition.ClearText()}"] = curationOption;
                    return this;
                }
                

                /// <param name="dependencyOption">Dependency option for this game's mods:<br/><br/>__0__ = Disallow dependencies<br/>__1__ = Allow dependencies, mods must opt in<br/>__2__ = Allow dependencies, mods must opt out<br/>__3__ = Allow dependencies with no restrictions</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DependencyOption(long dependencyOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"dependency_option{condition.ClearText()}"] = dependencyOption;
                    return this;
                }

                /// <param name="dependencyOption">An ICollection of Dependency option for this game's mods:<br/><br/>__0__ = Disallow dependencies<br/>__1__ = Allow dependencies, mods must opt in<br/>__2__ = Allow dependencies, mods must opt out<br/>__3__ = Allow dependencies with no restrictions</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter DependencyOption(ICollection<long> dependencyOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"dependency_option{condition.ClearText()}"] = dependencyOption;
                    return this;
                }
                

                /// <param name="communityOptions">Community features enabled for this game:<br/><br/>__0__ = None<br/>__1__ = Allow comments on mods<br/>__2__ = Allow guides<br/>__4__ = Pin on homepage<br/>__8__ = Show on homepage<br/>__16__ = Show more on homepage<br/>__32__ = Allow change status<br/>__64__ = Enable Previews (Game must be hidden)<br/>__128__ = Allow preview share-URL (Previews must be enabled)<br/>__256__ = Allow negative ratings<br/>__512__ = Allow mods to be edited via web<br/>__1024__ = Allow mod dependencies<br/>__2048__ = Allow comments on guides<br/>__?__ = Combine to find games with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter CommunityOptions(long communityOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"community_options{condition.ClearText()}"] = communityOptions;
                    return this;
                }

                /// <param name="communityOptions">An ICollection of Community features enabled for this game:<br/><br/>__0__ = None<br/>__1__ = Allow comments on mods<br/>__2__ = Allow guides<br/>__4__ = Pin on homepage<br/>__8__ = Show on homepage<br/>__16__ = Show more on homepage<br/>__32__ = Allow change status<br/>__64__ = Enable Previews (Game must be hidden)<br/>__128__ = Allow preview share-URL (Previews must be enabled)<br/>__256__ = Allow negative ratings<br/>__512__ = Allow mods to be edited via web<br/>__1024__ = Allow mod dependencies<br/>__2048__ = Allow comments on guides<br/>__?__ = Combine to find games with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter CommunityOptions(ICollection<long> communityOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"community_options{condition.ClearText()}"] = communityOptions;
                    return this;
                }
                

                /// <param name="monetizationOptions">Monetization options enabled for this game:<br/><br/>__0__ = Access to monetization features disabled<br/>__1__ = Access to monetization features enabled by mod.io<br/>__2__ = Marketplace enabled<br/>__4__ = Creator partner program enabled<br/>__8__ = Quantity limited mods supported<br/>__16__ = All mods must be quantity limited<br/>__?__ = Combine to find games with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter MonetizationOptions(long monetizationOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"monetization_options{condition.ClearText()}"] = monetizationOptions;
                    return this;
                }

                /// <param name="monetizationOptions">An ICollection of Monetization options enabled for this game:<br/><br/>__0__ = Access to monetization features disabled<br/>__1__ = Access to monetization features enabled by mod.io<br/>__2__ = Marketplace enabled<br/>__4__ = Creator partner program enabled<br/>__8__ = Quantity limited mods supported<br/>__16__ = All mods must be quantity limited<br/>__?__ = Combine to find games with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter MonetizationOptions(ICollection<long> monetizationOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"monetization_options{condition.ClearText()}"] = monetizationOptions;
                    return this;
                }
                

                /// <param name="apiAccessOptions">Level of API access allowed by this game:<br/><br/>__0__ = None<br/>__1__ = Allow 3rd parties to access this games API endpoints<br/>__2__ = Allow mods to be downloaded directly (if disabled all download URLs will contain a frequently changing verification hash to stop unauthorized use)<br/>__4__ = Requires a bearer token to be supplied when attempting the download to enforce authenticated downloads only<br/>__8__ = Requires a bearer token to be supplied and for the user to own the file when attempting the download<br/>__?__ = Combine to find games with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter ApiAccessOptions(long apiAccessOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"api_access_options{condition.ClearText()}"] = apiAccessOptions;
                    return this;
                }

                /// <param name="apiAccessOptions">An ICollection of Level of API access allowed by this game:<br/><br/>__0__ = None<br/>__1__ = Allow 3rd parties to access this games API endpoints<br/>__2__ = Allow mods to be downloaded directly (if disabled all download URLs will contain a frequently changing verification hash to stop unauthorized use)<br/>__4__ = Requires a bearer token to be supplied when attempting the download to enforce authenticated downloads only<br/>__8__ = Requires a bearer token to be supplied and for the user to own the file when attempting the download<br/>__?__ = Combine to find games with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter ApiAccessOptions(ICollection<long> apiAccessOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"api_access_options{condition.ClearText()}"] = apiAccessOptions;
                    return this;
                }
                

                /// <param name="maturityOptions">Mature content setup for this game:<br/><br/>__0__ = Don't allow mature content in mods<br/>__1__ = Allow mature content in mods<br/>__2__ = This game is for mature audiences only</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter MaturityOptions(long maturityOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_options{condition.ClearText()}"] = maturityOptions;
                    return this;
                }

                /// <param name="maturityOptions">An ICollection of Mature content setup for this game:<br/><br/>__0__ = Don't allow mature content in mods<br/>__1__ = Allow mature content in mods<br/>__2__ = This game is for mature audiences only</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter MaturityOptions(ICollection<long> maturityOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_options{condition.ClearText()}"] = maturityOptions;
                    return this;
                }
                

                /// <param name="showHiddenTags">Show the hidden tags associated with the given game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter ShowHiddenTags(bool showHiddenTags, Filtering condition = Filtering.None)
                {
                    Parameters[$"show_hidden_tags{condition.ClearText()}"] = showHiddenTags;
                    return this;
                }

                /// <param name="showHiddenTags">An ICollection of Show the hidden tags associated with the given game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserGamesFilter ShowHiddenTags(ICollection<bool> showHiddenTags, Filtering condition = Filtering.None)
                {
                    Parameters[$"show_hidden_tags{condition.ClearText()}"] = showHiddenTags;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
