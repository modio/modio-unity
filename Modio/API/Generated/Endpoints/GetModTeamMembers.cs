// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Teams
        {
            /// <summary>Get all users that are part of a mod team. Successful request will return an array of [Team Member Objects](#team-member-object). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            /// <param name="modId">Mod id</param>
            internal static async Task<(Error error, JToken teamMemberObjects)> GetModTeamMembersAsJToken(
                    long modId
,
            GetModTeamMembersFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/team", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);


                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all users that are part of a mod team. Successful request will return an array of [Team Member Objects](#team-member-object). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<TeamMemberObject[]>? teamMemberObjects)> GetModTeamMembers(
long modId
,
            GetModTeamMembersFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/team", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<TeamMemberObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetModTeamMembersFilter FilterGetModTeamMembers(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetModTeamMembersFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetModTeamMembers, see <see cref="Teams.FilterGetModTeamMembers"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetModTeamMembersFilter : SearchFilter<GetModTeamMembersFilter>
            {
                internal GetModTeamMembersFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the team member record.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the team member record.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="userId">Unique id of the user.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter UserId(long userId, Filtering condition = Filtering.None)
                {
                    Parameters[$"user_id{condition.ClearText()}"] = userId;
                    return this;
                }

                /// <param name="userId">An ICollection of Unique id of the user.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter UserId(ICollection<long> userId, Filtering condition = Filtering.None)
                {
                    Parameters[$"user_id{condition.ClearText()}"] = userId;
                    return this;
                }
                

                /// <param name="username">Display name of the user.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Username(string username, Filtering condition = Filtering.None)
                {
                    Parameters[$"username{condition.ClearText()}"] = username;
                    return this;
                }

                /// <param name="username">An ICollection of Display name of the user.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Username(ICollection<string> username, Filtering condition = Filtering.None)
                {
                    Parameters[$"username{condition.ClearText()}"] = username;
                    return this;
                }
                

                /// <param name="level">Level of permission the user has:<br/><br/>__1__ = Moderator (can moderate comments and content attached)<br/>__4__ = Manager (moderator access, including uploading builds and editing settings except supply and team members)<br/>__8__ = Administrator (full access, including editing the supply and team)</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Level(long level, Filtering condition = Filtering.None)
                {
                    Parameters[$"level{condition.ClearText()}"] = level;
                    return this;
                }

                /// <param name="level">An ICollection of Level of permission the user has:<br/><br/>__1__ = Moderator (can moderate comments and content attached)<br/>__4__ = Manager (moderator access, including uploading builds and editing settings except supply and team members)<br/>__8__ = Administrator (full access, including editing the supply and team)</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Level(ICollection<long> level, Filtering condition = Filtering.None)
                {
                    Parameters[$"level{condition.ClearText()}"] = level;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of the date the user was added to the team.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of the date the user was added to the team.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }
                

                /// <param name="pending">Has the user accepted the team invite?<br/><br/>__0__ = Accepted<br/>__1__ = Pending</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Pending(long pending, Filtering condition = Filtering.None)
                {
                    Parameters[$"pending{condition.ClearText()}"] = pending;
                    return this;
                }

                /// <param name="pending">An ICollection of Has the user accepted the team invite?<br/><br/>__0__ = Accepted<br/>__1__ = Pending</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModTeamMembersFilter Pending(ICollection<long> pending, Filtering condition = Filtering.None)
                {
                    Parameters[$"pending{condition.ClearText()}"] = pending;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
