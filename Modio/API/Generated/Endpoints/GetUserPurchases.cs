// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;
using Modio.Extensions;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Me
        {
            /// <summary>Get all mod's the _authenticated user_ has purchased. Successful request will return an array of [Mod Objects](#get-mods-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken modObjects)> GetUserPurchasesAsJToken(
            GetUserPurchasesFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/purchased", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all mod's the _authenticated user_ has purchased. Successful request will return an array of [Mod Objects](#get-mods-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<ModObject[]>? modObjects)> GetUserPurchases(
            GetUserPurchasesFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/purchased", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<Pagination<ModObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetUserPurchasesFilter FilterGetUserPurchases(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetUserPurchasesFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetUserPurchases, see <see cref="Me.FilterGetUserPurchases"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetUserPurchasesFilter : SearchFilter<GetUserPurchasesFilter>
            {
                internal GetUserPurchasesFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="gameId">Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter GameId(long gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }

                /// <param name="gameId">An ICollection of Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter GameId(ICollection<long> gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }
                

                /// <param name="status">Status of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not Accepted _(default)_<br/>__1__ = Accepted _(default)_<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Status(long status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }

                /// <param name="status">An ICollection of Status of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not Accepted _(default)_<br/>__1__ = Accepted _(default)_<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Status(ICollection<long> status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }
                

                /// <param name="visible">Visibility of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Hidden _(default)_<br/>__1__ = Public _(default)_</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Visible(long visible, Filtering condition = Filtering.None)
                {
                    Parameters[$"visible{condition.ClearText()}"] = visible;
                    return this;
                }

                /// <param name="visible">An ICollection of Visibility of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Hidden _(default)_<br/>__1__ = Public _(default)_</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Visible(ICollection<long> visible, Filtering condition = Filtering.None)
                {
                    Parameters[$"visible{condition.ClearText()}"] = visible;
                    return this;
                }
                

                /// <param name="submittedBy">Unique id of the user who has ownership of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter SubmittedBy(long submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }

                /// <param name="submittedBy">An ICollection of Unique id of the user who has ownership of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter SubmittedBy(ICollection<long> submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date mod was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date mod was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="dateUpdated">Unix timestamp of date mod was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter DateUpdated(long dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateUpdated">An ICollection of Unix timestamp of date mod was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter DateUpdated(ICollection<long> dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="dateLive">Unix timestamp of date mod was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter DateLive(long dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateLive">An ICollection of Unix timestamp of date mod was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter DateLive(ICollection<long> dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="name">Name of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Name(string name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }

                /// <param name="name">An ICollection of Name of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Name(ICollection<string> name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }
                

                /// <param name="nameId">URL-friendly name for the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter NameId(string nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }

                /// <param name="nameId">An ICollection of URL-friendly name for the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter NameId(ICollection<string> nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }
                

                /// <param name="modfile">Unique id of the file that is the current active release.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Modfile(long modfile, Filtering condition = Filtering.None)
                {
                    Parameters[$"modfile{condition.ClearText()}"] = modfile;
                    return this;
                }

                /// <param name="modfile">An ICollection of Unique id of the file that is the current active release.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Modfile(ICollection<long> modfile, Filtering condition = Filtering.None)
                {
                    Parameters[$"modfile{condition.ClearText()}"] = modfile;
                    return this;
                }
                

                /// <param name="metadataKvp">Colon-separated values representing the key-value pairs you want to filter the results by. If you supply more than one key-pair, separate the pairs by a comma. Will only filter by an exact key-pair match.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MetadataKvp(string metadataKvp, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_kvp{condition.ClearText()}"] = metadataKvp;
                    return this;
                }

                /// <param name="metadataKvp">An ICollection of Colon-separated values representing the key-value pairs you want to filter the results by. If you supply more than one key-pair, separate the pairs by a comma. Will only filter by an exact key-pair match.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MetadataKvp(ICollection<string> metadataKvp, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_kvp{condition.ClearText()}"] = metadataKvp;
                    return this;
                }
                

                /// <param name="metadataBlob">Metadata that accepts any string-based arbitrary value, up to a maximum of 50,000 characters.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MetadataBlob(string metadataBlob, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_blob{condition.ClearText()}"] = metadataBlob;
                    return this;
                }

                /// <param name="metadataBlob">An ICollection of Metadata that accepts any string-based arbitrary value, up to a maximum of 50,000 characters.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MetadataBlob(ICollection<string> metadataBlob, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_blob{condition.ClearText()}"] = metadataBlob;
                    return this;
                }
                

                /// <param name="tags">Comma-separated values representing the tags you want to filter the results by. If you specify multiple tags, only mods which have all tags will be returned, and only tags that are supported by the parent game can be applied. To determine what tags are eligible, see the tags values within `tag_options` column on the parent [Game Object](#game-object). If you want to ensure mods returned do not contain particular tag(s), you can use the `tags-not-in` filter either independently or alongside this filter.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Tags(string tags, Filtering condition = Filtering.None)
                {
                    Parameters[$"tags{condition.ClearText()}"] = tags;
                    return this;
                }

                /// <param name="tags">An ICollection of Comma-separated values representing the tags you want to filter the results by. If you specify multiple tags, only mods which have all tags will be returned, and only tags that are supported by the parent game can be applied. To determine what tags are eligible, see the tags values within `tag_options` column on the parent [Game Object](#game-object). If you want to ensure mods returned do not contain particular tag(s), you can use the `tags-not-in` filter either independently or alongside this filter.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Tags(ICollection<string> tags, Filtering condition = Filtering.None)
                {
                    Parameters[$"tags{condition.ClearText()}"] = tags;
                    return this;
                }
                

                /// <param name="maturityOption">Mature content found in this mod:<br/><br/>__0__ = None<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MaturityOption(long maturityOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_option{condition.ClearText()}"] = maturityOption;
                    return this;
                }

                /// <param name="maturityOption">An ICollection of Mature content found in this mod:<br/><br/>__0__ = None<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MaturityOption(ICollection<long> maturityOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_option{condition.ClearText()}"] = maturityOption;
                    return this;
                }
                

                /// <param name="monetizationOptions">Monetization options enabled for this mod:<br/><br/>__0__ = Access to monetization features disabled<br/>__1__ = Access to monetization features enabled by the game for this mod<br/>__2__ = Marketplace enabled<br/>__8__ = Quantity of this mod is limited<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MonetizationOptions(long monetizationOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"monetization_options{condition.ClearText()}"] = monetizationOptions;
                    return this;
                }

                /// <param name="monetizationOptions">An ICollection of Monetization options enabled for this mod:<br/><br/>__0__ = Access to monetization features disabled<br/>__1__ = Access to monetization features enabled by the game for this mod<br/>__2__ = Marketplace enabled<br/>__8__ = Quantity of this mod is limited<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter MonetizationOptions(ICollection<long> monetizationOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"monetization_options{condition.ClearText()}"] = monetizationOptions;
                    return this;
                }
                

                /// <param name="platformStatus">Filter results by their current platform status, valid values are `pending_only` and `live_and_pending` (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details).<br/><br/>__NOTE:__ that this parameter is only considered in the request if the parent game has enabled [cross-platform filtering](#targeting-a-platform).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter PlatformStatus(string platformStatus, Filtering condition = Filtering.None)
                {
                    Parameters[$"platform_status{condition.ClearText()}"] = platformStatus;
                    return this;
                }

                /// <param name="platformStatus">An ICollection of Filter results by their current platform status, valid values are `pending_only` and `live_and_pending` (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details).<br/><br/>__NOTE:__ that this parameter is only considered in the request if the parent game has enabled [cross-platform filtering](#targeting-a-platform).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter PlatformStatus(ICollection<string> platformStatus, Filtering condition = Filtering.None)
                {
                    Parameters[$"platform_status{condition.ClearText()}"] = platformStatus;
                    return this;
                }
                

                /// <param name="platforms">Filter results by their current platform, accepts multiple platforms as comma-separated values (e.g. `ps4,switch`), valid values are `all`, `source`, `windows`, `mac`, `linux`, `android`, `ios`, `xboxone`, `xboxseriesx`, `ps4`, `ps5`, `switch`, `oculus` (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details).<br/><br/>__NOTE:__ that this parameter will take precedence over the header from [cross-platform filtering](#targeting-a-platform).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Platforms(string platforms, Filtering condition = Filtering.None)
                {
                    Parameters[$"platforms{condition.ClearText()}"] = platforms;
                    return this;
                }

                /// <param name="platforms">An ICollection of Filter results by their current platform, accepts multiple platforms as comma-separated values (e.g. `ps4,switch`), valid values are `all`, `source`, `windows`, `mac`, `linux`, `android`, `ios`, `xboxone`, `xboxseriesx`, `ps4`, `ps5`, `switch`, `oculus` (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details).<br/><br/>__NOTE:__ that this parameter will take precedence over the header from [cross-platform filtering](#targeting-a-platform).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserPurchasesFilter Platforms(ICollection<string> platforms, Filtering condition = Filtering.None)
                {
                    Parameters[$"platforms{condition.ClearText()}"] = platforms;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
