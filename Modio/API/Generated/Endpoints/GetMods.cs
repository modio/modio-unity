// <auto-generated />
// not actually

/*
 *
 *      DO NOT REGENERATE
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;
using Modio.Extensions;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Mods
        {
            /// <summary>Get all mods for the corresponding game. Successful request will return an array of [Mod Objects](#get-mods-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken modObjects)> GetModsAsJToken(
            GetModsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all mods for the corresponding game. Successful request will return an array of [Mod Objects](#get-mods-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<ModObject[]>? modObjects)> GetMods(
            GetModsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<ModObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetModsFilter FilterGetMods(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetModsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetMods, see <see cref="Mods.FilterGetMods"/>
            /// to construct this filter <br/>
            /// </summary>
            public class GetModsFilter : SearchFilter<GetModsFilter>
            {
                internal GetModsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="gameId">Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter GameId(long gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }

                /// <param name="gameId">An ICollection of Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter GameId(ICollection<long> gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }
                

                /// <param name="status">Status of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not accepted<br/>__1__ = Accepted _(default)_<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Status(long status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }

                /// <param name="status">An ICollection of Status of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not accepted<br/>__1__ = Accepted _(default)_<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Status(ICollection<long> status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }
                

                /// <param name="visible">Visibility of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Hidden<br/>__1__ = Public _(default)_</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Visible(long visible, Filtering condition = Filtering.None)
                {
                    Parameters[$"visible{condition.ClearText()}"] = visible;
                    return this;
                }

                /// <param name="visible">An ICollection of Visibility of the mod (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Hidden<br/>__1__ = Public _(default)_</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Visible(ICollection<long> visible, Filtering condition = Filtering.None)
                {
                    Parameters[$"visible{condition.ClearText()}"] = visible;
                    return this;
                }
                

                /// <param name="submittedBy">Unique id of the user who has ownership of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter SubmittedBy(long submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }

                /// <param name="submittedBy">An ICollection of Unique id of the user who has ownership of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter SubmittedBy(ICollection<long> submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }
                

                /// <param name="submittedByDisplayName">The display name of the mod author.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter SubmittedByDisplayName(string submittedByDisplayName, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by_display_name{condition.ClearText()}"] = submittedByDisplayName;
                    return this;
                }

                /// <param name="submittedByDisplayName">An ICollection of The display name of the mod author.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter SubmittedByDisplayName(ICollection<string> submittedByDisplayName, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by_display_name{condition.ClearText()}"] = submittedByDisplayName;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date mod was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date mod was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampsToHour();
                    return this;
                }

                /// <param name="dateUpdated">Unix timestamp of date mod was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter DateUpdated(long dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateUpdated">An ICollection of Unix timestamp of date mod was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter DateUpdated(ICollection<long> dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated.RoundTimestampsToHour();
                    return this;
                }

                /// <param name="dateLive">Unix timestamp of date mod was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter DateLive(long dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateLive">An ICollection of Unix timestamp of date mod was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter DateLive(ICollection<long> dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive.RoundTimestampsToHour();
                    return this;
                }

                /// <param name="communityOptions">Community features enabled for this mod:<br/><br/>__0__ = All the options below are disabled<br/>__1__ = Enable comments<br/>__64__ = Enable previews<br/>__128__ = Enable preview URLs<br/>__1024__ = Allow dependencies<br/>__?__ = Add the options you want together, to enable multiple options (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter CommunityOptions(long communityOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"community_options{condition.ClearText()}"] = communityOptions;
                    return this;
                }

                /// <param name="communityOptions">An ICollection of Community features enabled for this mod:<br/><br/>__0__ = All the options below are disabled<br/>__1__ = Enable comments<br/>__64__ = Enable previews<br/>__128__ = Enable preview URLs<br/>__1024__ = Allow dependencies<br/>__?__ = Add the options you want together, to enable multiple options (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter CommunityOptions(ICollection<long> communityOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"community_options{condition.ClearText()}"] = communityOptions;
                    return this;
                }

                /// <param name="maturityOption">Maturity options set by the mod creator:<br/><br/>__0__ = None<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MaturityOption(long maturityOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_option{condition.ClearText()}"] = maturityOption;
                    return this;
                }

                /// <param name="maturityOption">An ICollection of Maturity options set by the mod creator:<br/><br/>__0__ = None<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MaturityOption(ICollection<long> maturityOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_option{condition.ClearText()}"] = maturityOption;
                    return this;
                }

                /// <param name="monetizationOptions">Monetization options enabled for this mod:<br/><br/>__0__ = Access to monetization features disabled<br/>__1__ = Access to monetization features enabled by the game for this mod<br/>__2__ = Marketplace enabled<br/>__8__ = Quantity of this mod is limited<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MonetizationOptions(long monetizationOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"monetization_options{condition.ClearText()}"] = monetizationOptions;
                    return this;
                }

                /// <param name="monetizationOptions">An ICollection of Monetization options enabled for this mod:<br/><br/>__0__ = Access to monetization features disabled<br/>__1__ = Access to monetization features enabled by the game for this mod<br/>__2__ = Marketplace enabled<br/>__8__ = Quantity of this mod is limited<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MonetizationOptions(ICollection<long> monetizationOptions, Filtering condition = Filtering.None)
                {
                    Parameters[$"monetization_options{condition.ClearText()}"] = monetizationOptions;
                    return this;
                }

                /// <param name="name">Name of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Name(string name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }

                /// <param name="name">An ICollection of Name of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Name(ICollection<string> name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }

                /// <param name="nameId">Path for the mod on mod.io. For example: https://mod.io/g/gamename/m/__mod-name-id-here__</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter NameId(string nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }

                /// <param name="nameId">An ICollection of Path for the mod on mod.io. For example: https://mod.io/g/gamename/m/__mod-name-id-here__</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter NameId(ICollection<string> nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }

                /// <param name="modfile">Unique id of the file that is the current active release (see [mod files](#files)).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Modfile(long modfile, Filtering condition = Filtering.None)
                {
                    Parameters[$"modfile{condition.ClearText()}"] = modfile;
                    return this;
                }

                /// <param name="modfile">An ICollection of Unique id of the file that is the current active release (see [mod files](#files)).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Modfile(ICollection<long> modfile, Filtering condition = Filtering.None)
                {
                    Parameters[$"modfile{condition.ClearText()}"] = modfile;
                    return this;
                }

                /// <param name="metadataBlob">Metadata that is designed to be handled by the game client and is recommended to not be exposed to content creators when submitting their mods. As an example, this may include properties as to how the item works, or other information you need to display. Metadata can also be stored as searchable [key value pairs](#metadata), and to individual [mod files](#get-modfiles).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MetadataBlob(string metadataBlob, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_blob{condition.ClearText()}"] = metadataBlob;
                    return this;
                }

                /// <param name="metadataBlob">An ICollection of Metadata that is designed to be handled by the game client and is recommended to not be exposed to content creators when submitting their mods. As an example, this may include properties as to how the item works, or other information you need to display. Metadata can also be stored as searchable [key value pairs](#metadata), and to individual [mod files](#get-modfiles).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MetadataBlob(ICollection<string> metadataBlob, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_blob{condition.ClearText()}"] = metadataBlob;
                    return this;
                }

                /// <param name="metadataKvp">Colon-separated values representing the key-value pairs you want to filter the results by. If you supply more than one key-pair, separate the pairs by a comma. Will only filter by an exact key-pair match.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MetadataKvp(string metadataKvp, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_kvp{condition.ClearText()}"] = metadataKvp;
                    return this;
                }

                /// <param name="metadataKvp">An ICollection of Colon-separated values representing the key-value pairs you want to filter the results by. If you supply more than one key-pair, separate the pairs by a comma. Will only filter by an exact key-pair match.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter MetadataKvp(ICollection<string> metadataKvp, Filtering condition = Filtering.None)
                {
                    Parameters[$"metadata_kvp{condition.ClearText()}"] = metadataKvp;
                    return this;
                }

                /// <param name="tags">Comma-separated values representing the tags you want to filter the results by. If you specify multiple tags, only mods which have all tags will be returned, and only tags that are supported by the parent game can be applied. To determine what tags are eligible, see the tags values within `tag_options` column on the parent [Game Object](#game-object). If you want to ensure mods returned do not contain particular tag(s), you can use the `tags-not-in` filter either independently or alongside this filter.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Tags(string tags, Filtering condition = Filtering.None)
                {
                    Parameters[$"tags{condition.ClearText()}"] = tags;
                    return this;
                }

                /// <param name="tags">An ICollection of Comma-separated values representing the tags you want to filter the results by. If you specify multiple tags, only mods which have all tags will be returned, and only tags that are supported by the parent game can be applied. To determine what tags are eligible, see the tags values within `tag_options` column on the parent [Game Object](#game-object). If you want to ensure mods returned do not contain particular tag(s), you can use the `tags-not-in` filter either independently or alongside this filter.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Tags(ICollection<string> tags, Filtering condition = Filtering.None)
                {
                    Parameters[$"tags{condition.ClearText()}"] = tags;
                    return this;
                }

                /// <param name="platformStatus">If the parent game has enabled per-platform files, by default only mods with files which are approved and live for the [target platform](#targeting-a-platform) will be returned.<br/><br/>To QA mods with pending files, you can filter results by their current platform status, using `pending_only` or `live_and_pending`.<br/><br/>__NOTE:__ only game admins can filter by this field.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter PlatformStatus(string platformStatus, Filtering condition = Filtering.None)
                {
                    Parameters[$"platform_status{condition.ClearText()}"] = platformStatus;
                    return this;
                }

                /// <param name="platformStatus">An ICollection of If the parent game has enabled per-platform files, by default only mods with files which are approved and live for the [target platform](#targeting-a-platform) will be returned.<br/><br/>To QA mods with pending files, you can filter results by their current platform status, using `pending_only` or `live_and_pending`.<br/><br/>__NOTE:__ only game admins can filter by this field.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter PlatformStatus(ICollection<string> platformStatus, Filtering condition = Filtering.None)
                {
                    Parameters[$"platform_status{condition.ClearText()}"] = platformStatus;
                    return this;
                }

                /// <param name="revenueType">Finds all mods with or without a price. Defaults to free. <br/><br/>__0__ = Free<br/>__1__ = Paid<br/>__2__ = Free and Paid</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter RevenueType(long revenueType, Filtering condition = Filtering.None)
                {
                    Parameters[$"revenue_type{condition.ClearText()}"] = revenueType;
                    return this;
                }

                /// <param name="revenueType">An ICollection of Finds all mods with or without a price. Defaults to free. <br/><br/>__0__ = Free<br/>__1__ = Paid<br/>__2__ = Free and Paid</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter RevenueType(ICollection<long> revenueType, Filtering condition = Filtering.None)
                {
                    Parameters[$"revenue_type{condition.ClearText()}"] = revenueType;
                    return this;
                }

                /// <param name="stock">Finds all mods that are in/out of stock. <br/><br/>__0__ = Sold Out<br/>__1__ = In Stock</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Stock(long stock, Filtering condition = Filtering.None)
                {
                    Parameters[$"stock{condition.ClearText()}"] = stock;
                    return this;
                }

                /// <param name="stock">An ICollection of Finds all mods that are in/out of stock. <br/><br/>__0__ = Sold Out<br/>__1__ = In Stock</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsFilter Stock(ICollection<long> stock, Filtering condition = Filtering.None)
                {
                    Parameters[$"stock{condition.ClearText()}"] = stock;
                    return this;
                }

                public GetModsFilter SortByStringType(string key, bool ascending = true)
                {
                    Parameters[$"_sort"] = $"{(ascending ? "" : "-")}{key}";
                    return this;
                }
            }
#endregion
        }
    }
}
