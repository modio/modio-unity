// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class FilesMultipartUploads
        {
            /// <summary>Get all uploaded parts for a corresponding upload session. Successful request will return an array of [Multipart Upload Part Objects](#get-multipart-upload-parts-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            /// <param name="modId">Mod id</param>
            internal static async Task<(Error error, JToken multipartUploadPartObjects)> GetMultipartUploadPartsAsJToken(
long modId
,
            GetMultipartUploadPartsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/files/multipart", ModioAPIRequestMethod.Get);


                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all uploaded parts for a corresponding upload session. Successful request will return an array of [Multipart Upload Part Objects](#get-multipart-upload-parts-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<MultipartUploadPartObject[]>? multipartUploadPartObjects)> GetMultipartUploadParts(
long modId
,
            GetMultipartUploadPartsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/files/multipart", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<MultipartUploadPartObject[]>>(request);
            }
        #region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="uploadId">The universally unique ID (UUID) that represents your upload session.</param>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetMultipartUploadPartsFilter FilterGetMultipartUploadParts(
                string uploadId,
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetMultipartUploadPartsFilter(
                pageIndex, 
                pageSize,
                uploadId
            );
            
            /// <summary>
            /// Filter for GetMultipartUploadParts, see <see cref="FilesMultipartUploads.FilterGetMultipartUploadParts"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// <see cref="UploadId(string,Filtering)"/> The universally unique ID (UUID) that represents your upload session.<br/>
            /// </summary>
            public class GetMultipartUploadPartsFilter : SearchFilter<GetMultipartUploadPartsFilter>
            {
                internal string _uploadId;
                internal GetMultipartUploadPartsFilter(
                    int pageIndex,
                    int pageSize,
                    string uploadId
                ) : base(pageIndex, pageSize) 
                {
                    _uploadId = uploadId;
                }
            }
            #endregion
        
        }
    }
}
