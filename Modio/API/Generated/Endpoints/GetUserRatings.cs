// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;
using Modio.Extensions;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Me
        {
            /// <summary>Get all mod rating's submitted by the _authenticated user_. Successful request will return an array of [Rating Objects](#get-user-ratings-2).</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken ratingObjects)> GetUserRatingsAsJToken(
            GetUserRatingsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/ratings", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all mod rating's submitted by the _authenticated user_. Successful request will return an array of [Rating Objects](#get-user-ratings-2).</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<RatingObject[]>? ratingObjects)> GetUserRatings(
            GetUserRatingsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/ratings", ModioAPIRequestMethod.Get);

                request.Options.AddFilterParameters(filter);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<Pagination<RatingObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetUserRatingsFilter FilterGetUserRatings(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetUserRatingsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetUserRatings, see <see cref="Me.FilterGetUserRatings"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetUserRatingsFilter : SearchFilter<GetUserRatingsFilter>
            {
                internal GetUserRatingsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="gameId">Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter GameId(long gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }

                /// <param name="gameId">An ICollection of Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter GameId(ICollection<long> gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }
                

                /// <param name="modId">Unique id of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter ModId(long modId, Filtering condition = Filtering.None)
                {
                    Parameters[$"mod_id{condition.ClearText()}"] = modId;
                    return this;
                }

                /// <param name="modId">An ICollection of Unique id of the mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter ModId(ICollection<long> modId, Filtering condition = Filtering.None)
                {
                    Parameters[$"mod_id{condition.ClearText()}"] = modId;
                    return this;
                }
                

                /// <param name="rating">Type of rating applied:<br/><br/>__-1__ = Negative Rating<br/>__1__ = Positive Rating</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter Rating(long rating, Filtering condition = Filtering.None)
                {
                    Parameters[$"rating{condition.ClearText()}"] = rating;
                    return this;
                }

                /// <param name="rating">An ICollection of Type of rating applied:<br/><br/>__-1__ = Negative Rating<br/>__1__ = Positive Rating</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter Rating(ICollection<long> rating, Filtering condition = Filtering.None)
                {
                    Parameters[$"rating{condition.ClearText()}"] = rating;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date rating was submitted.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date rating was submitted.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserRatingsFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampsToHour();
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
