// <auto-generated />
// Not really

/*
 *
 *
 * DO NOT REGENERATE
 * 
 * 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class InAppPurchases
        {
            /// <summary>Convert in-app consumables that a user has purchased on the Meta Horizon store into their mod.io inventory. For an entitlement to be eligible for consumption it must be registered on mod.io within the In-App Purchases section of your game profile. This endpoint will consume the entitlement on behalf of the user against the portal in which the entitlements reside (i.e. Meta Horizons).</summary>
            public static async Task<(Error error, JToken entitlementFulfillmentObjects)> SyncMetaEntitlementAsJToken(
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/iap/meta/sync", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Convert in-app consumables that a user has purchased on the Meta Horizon store into their mod.io inventory. For an entitlement to be eligible for consumption it must be registered on mod.io within the In-App Purchases section of your game profile. This endpoint will consume the entitlement on behalf of the user against the portal in which the entitlements reside (i.e. Meta Horizons).</summary>
            public static async Task<(Error error, Pagination<EntitlementFulfillmentObject[]>? entitlementFulfillmentObjects)> SyncMetaEntitlement(
                long userId
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/iap/meta/sync", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                // Android/Oculus -> Quest
                // PC Platform    -> Rift
                // Rift is PCVR, so we can safely know if we're Rift or not based on if we're a PC or Android/Oculus platform
                string device = ModioAPI._platform == Platform.Oculus
                                || ModioAPI._platform == Platform.Android
                    ? "quest"
                    : "rift";
                
                request.Options.RequireAuthentication();
                request.Options.AddQueryParameter("device", device);
                request.Options.AddQueryParameter("user_id", userId.ToString());

                return await _apiInterface.GetJson<Pagination<EntitlementFulfillmentObject[]>>(request);
            }
        }
    }
}
