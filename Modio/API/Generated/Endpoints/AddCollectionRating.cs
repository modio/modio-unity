// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Ratings
        {
            /// <summary>
            /// <p>Submit a positive or negative rating for a collection. Each user can supply only one rating for a collection, subsequent ratings will override the old value. Successful request will return [Message Object](#message-object).</p>
            /// <p>__NOTE:__ You can order collections by their rating, and view their rating in the [Mod Collection Object](#mod-collection-object).</p>
            /// </summary>
            internal static async Task<(Error error, JToken addRatingResponse)> AddCollectionRatingAsJToken(
                long collectionId,
                AddRatingRequest? body = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections/{collectionId}/compatibility", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddBody(body);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>
            /// <p>Submit a positive or negative rating for a collection. Each user can supply only one rating for a collection, subsequent ratings will override the old value. Successful request will return [Message Object](#message-object).</p>
            /// <p>__NOTE:__ You can order collections by their rating, and view their rating in the [Mod Collection Object](#mod-collection-object).</p>
            /// </summary>
            /// <param name="collectionId">Collection id</param>
            /// <param name="body"></param>
            internal static async Task<(Error error, AddRatingResponse? addRatingResponse)> AddCollectionRating(
                long collectionId,
                AddRatingRequest? body = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections/{collectionId}/compatibility", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddBody(body);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<AddRatingResponse>(request);
            }
        }
    }
}
