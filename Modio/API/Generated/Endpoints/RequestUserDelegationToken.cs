// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class ServiceToService
        {
            /// <summary>Request a User Delegation Token on behalf of the authenticated user. The returned token should be passed to your secure backend to be used with your registered backend server to facilitate S2S requests on behalf of a user. User Delegation Tokens are valid for 60 days, at which point you will need the to make another request to this endpoint using a users' bearer token. A successful request will return a [User Delegation Token](#user-delegation-token-object) object.</summary>
            internal static async Task<(Error error, JToken userDelegationTokenObject)> RequestUserDelegationTokenAsJToken(

            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/s2s/oauth/token", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Request a User Delegation Token on behalf of the authenticated user. The returned token should be passed to your secure backend to be used with your registered backend server to facilitate S2S requests on behalf of a user. User Delegation Tokens are valid for 60 days, at which point you will need the to make another request to this endpoint using a users' bearer token. A successful request will return a [User Delegation Token](#user-delegation-token-object) object.</summary>
            internal static async Task<(Error error, UserDelegationTokenObject? userDelegationTokenObject)> RequestUserDelegationToken(

            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/s2s/oauth/token", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<UserDelegationTokenObject>(request);
            }
        }
    }
}
