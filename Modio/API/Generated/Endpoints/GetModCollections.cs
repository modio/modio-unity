// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Collections
        {
            /// <summary>Get all mod collections. Successful request will return an array of [Mod Collection Objects](#mod-collection-object). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            internal static async Task<(Error error, JToken modCollectionObjects)> GetModCollectionsAsJToken(GetModCollectionsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all mod collections. Successful request will return an array of [Mod Collection Objects](#mod-collection-object). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            internal static async Task<(Error error, Pagination<ModCollectionObject[]>? modCollectionObjects)> GetModCollections(GetModCollectionsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);
                
                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<ModCollectionObject[]>>(request);
            }
            #region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetModCollectionsFilter FilterGetModCollections(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetModCollectionsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetMods, see <see cref="Mods.FilterGetMods"/>
            /// to construct this filter <br/>
            /// </summary>
            public class GetModCollectionsFilter : SearchFilter<GetModCollectionsFilter>
            {
                internal GetModCollectionsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the mod collection.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the mod collection.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="status">Status of the mod collection (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not accepted<br/>__1__ = Accepted _(default)_<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Status(long status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }

                /// <param name="status">An ICollection of Status of the mod collection (only game admins can filter by this field, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Not accepted<br/>__1__ = Accepted _(default)_<br/>__3__ = Deleted</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Status(ICollection<long> status, Filtering condition = Filtering.None)
                {
                    Parameters[$"status{condition.ClearText()}"] = status;
                    return this;
                }

                /// <param name="submittedBy">Unique id of the user who has ownership of the mod collection.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter SubmittedBy(long submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }

                /// <param name="submittedBy">An ICollection of Unique id of the user who has ownership of the mod collection.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter SubmittedBy(ICollection<long> submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }
                

                /// <param name="submittedByDisplayName">The display name of the mod collection author.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter SubmittedByDisplayName(string submittedByDisplayName, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by_display_name{condition.ClearText()}"] = submittedByDisplayName;
                    return this;
                }

                /// <param name="submittedByDisplayName">An ICollection of The display name of the mod collection author.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter SubmittedByDisplayName(ICollection<string> submittedByDisplayName, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by_display_name{condition.ClearText()}"] = submittedByDisplayName;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date mod collection was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date mod collection was registered.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }
                

                /// <param name="dateUpdated">Unix timestamp of date mod collection was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter DateUpdated(long dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated;
                    return this;
                }

                /// <param name="dateUpdated">An ICollection of Unix timestamp of date mod collection was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter DateUpdated(ICollection<long> dateUpdated, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_updated{condition.ClearText()}"] = dateUpdated;
                    return this;
                }
                

                /// <param name="dateLive">Unix timestamp of date mod collection was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter DateLive(long dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive;
                    return this;
                }

                /// <param name="dateLive">An ICollection of Unix timestamp of date mod collection was set live.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter DateLive(ICollection<long> dateLive, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_live{condition.ClearText()}"] = dateLive;
                    return this;
                }
                
                /// <param name="maturityOption">Maturity options set by the mod collection creator:<br/><br/>__0__ = None<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter MaturityOption(long maturityOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_option{condition.ClearText()}"] = maturityOption;
                    return this;
                }

                /// <param name="maturityOption">An ICollection of Maturity options set by the mod collection creator:<br/><br/>__0__ = None<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Combine to find mods with multiple options enabled (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter MaturityOption(ICollection<long> maturityOption, Filtering condition = Filtering.None)
                {
                    Parameters[$"maturity_option{condition.ClearText()}"] = maturityOption;
                    return this;
                }

                /// <param name="name">Name of the mod collection.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Name(string name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }

                /// <param name="name">An ICollection of Name of the mod collection.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Name(ICollection<string> name, Filtering condition = Filtering.None)
                {
                    Parameters[$"name{condition.ClearText()}"] = name;
                    return this;
                }
                

                /// <param name="nameId">Path for the mod collection on mod.io. For example: https://mod.io/g/gamename/m/__mod-name-id-here__</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter NameId(string nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }

                /// <param name="nameId">An ICollection of Path for the mod collection on mod.io. For example: https://mod.io/g/gamename/m/__mod-name-id-here__</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter NameId(ICollection<string> nameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"name_id{condition.ClearText()}"] = nameId;
                    return this;
                }
                
                /// <param name="tags">Comma-separated values representing the tags you want to filter the results by. If you specify multiple tags, only mod collections which have all tags will be returned, and only tags that are supported by the parent game can be applied. To determine what tags are eligible, see the tags values within `tag_options` column on the parent [Game Object](#game-object). If you want to ensure mods returned do not contain particular tag(s), you can use the `tags-not-in` filter either independently or alongside this filter.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Tags(string tags, Filtering condition = Filtering.None)
                {
                    Parameters[$"tags{condition.ClearText()}"] = tags;
                    return this;
                }

                /// <param name="tags">An ICollection of Comma-separated values representing the tags you want to filter the results by. If you specify multiple tags, only mod collections which have all tags will be returned, and only tags that are supported by the parent game can be applied. To determine what tags are eligible, see the tags values within `tag_options` column on the parent [Game Object](#game-object). If you want to ensure mods returned do not contain particular tag(s), you can use the `tags-not-in` filter either independently or alongside this filter.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModCollectionsFilter Tags(ICollection<string> tags, Filtering condition = Filtering.None)
                {
                    Parameters[$"tags{condition.ClearText()}"] = tags;
                    return this;
                }

                public GetModCollectionsFilter SortByStringType(string key, bool ascending = true)
                {
                    Parameters[$"_sort"] = $"{(ascending ? "" : "-")}{key}";
                    return this;
                }
            }
#endregion
        }
    }
}
