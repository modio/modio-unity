// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Dependencies
        {
            /// <summary>
            /// <p>Get all dependencies the chosen mod has selected. This is useful if a mod requires other mods be installed for it to run. Successful request will return an array of [Mod Dependencies Objects](#get-mod-dependencies-2).</p>
            /// <p>__NOTE:__ This endpoint returns all mod dependencies, irrespective of their status, visibility or platform support. If your game automatically installs dependencies, we recommend moderating the use of this feature strictly, to ensure creators are not selecting _soft_ dependencies to promote or credit other mods, and dependencies are checked for suitability prior to install.</p>
            /// <p>For example: the official mod.io plugins where dependency support is enabled, typically subscribe users to all dependencies, so the mods suitability and synchronization can be managed by the subscription process. Following a similar process is recommend, particularly if enabling `recursive` dependency fetching, given it can result in many mods being returned.</p>
            /// <p>__DEPRECATION WARNING__: By default, this endpoint does not return dependencies recursively. However, in a future version of the API, dependencies _will_ be shown recursively by default. We suggest that you remove any custom implementation you may have in order to retrieve dependencies recursively, and instead use the `?recursive=true` query parameter to fetch all dependencies in a single request.</p>
            /// </summary>
            /// <param name="filter">Filter to apply to the request.</param>
            /// <param name="modId">Mod id</param>
            internal static async Task<(Error error, JToken modDependenciesObjects)> GetModDependenciesAsJToken(
                    long modId
,
            GetModDependenciesFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/dependencies", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);


                return await _apiInterface.GetJson(request);
            }

            /// <summary>
            /// <p>Get all dependencies the chosen mod has selected. This is useful if a mod requires other mods be installed for it to run. Successful request will return an array of [Mod Dependencies Objects](#get-mod-dependencies-2).</p>
            /// <p>__NOTE:__ This endpoint returns all mod dependencies, irrespective of their status, visibility or platform support. If your game automatically installs dependencies, we recommend moderating the use of this feature strictly, to ensure creators are not selecting _soft_ dependencies to promote or credit other mods, and dependencies are checked for suitability prior to install.</p>
            /// <p>For example: the official mod.io plugins where dependency support is enabled, typically subscribe users to all dependencies, so the mods suitability and synchronization can be managed by the subscription process. Following a similar process is recommend, particularly if enabling `recursive` dependency fetching, given it can result in many mods being returned.</p>
            /// <p>__DEPRECATION WARNING__: By default, this endpoint does not return dependencies recursively. However, in a future version of the API, dependencies _will_ be shown recursively by default. We suggest that you remove any custom implementation you may have in order to retrieve dependencies recursively, and instead use the `?recursive=true` query parameter to fetch all dependencies in a single request.</p>
            /// </summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<ModDependenciesObject[]>? modDependenciesObjects)> GetModDependencies(
long modId
,
            GetModDependenciesFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/dependencies", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<ModDependenciesObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetModDependenciesFilter FilterGetModDependencies(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetModDependenciesFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetModDependencies, see <see cref="Dependencies.FilterGetModDependencies"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetModDependenciesFilter : SearchFilter<GetModDependenciesFilter>
            {
                internal GetModDependenciesFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="recursive">Should the response include child dependencies in a recursive manner? A value of `true` will display dependencies of dependencies up to a maximum depth of 5 where as a value of `false` will only display immediate dependencies.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModDependenciesFilter Recursive(bool recursive, Filtering condition = Filtering.None)
                {
                    Parameters[$"recursive{condition.ClearText()}"] = recursive;
                    return this;
                }

                /// <param name="recursive">An ICollection of Should the response include child dependencies in a recursive manner? A value of `true` will display dependencies of dependencies up to a maximum depth of 5 where as a value of `false` will only display immediate dependencies.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModDependenciesFilter Recursive(ICollection<bool> recursive, Filtering condition = Filtering.None)
                {
                    Parameters[$"recursive{condition.ClearText()}"] = recursive;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
