// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Me
        {
            /// <summary>Get the _authenticated user_ details. Successful request will return a single [User Object](#user-object). This endpoint is optionally available as an S2S [Service to Service](#service-to-service) request with an oauth S2S token. This behaves in the same way and will display user info for the account that created the S2S token. To retrieve another users info instead, you can optionally pass in a [User Delegate Token](#user-delegation-token-object) when doing an S2S request. [UDT](#user-delegation-token-object) can only be used when doing an S2S request.</summary>
            internal static async Task<(Error error, JToken userObject)> GetAuthenticatedUserAsJToken(
                string xModioDelegationToken = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me", ModioAPIRequestMethod.Get);

                request.Options.AddHeaderParameter("X-Modio-Delegation-Token", xModioDelegationToken);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get the _authenticated user_ details. Successful request will return a single [User Object](#user-object). This endpoint is optionally available as an S2S [Service to Service](#service-to-service) request with an oauth S2S token. This behaves in the same way and will display user info for the account that created the S2S token. To retrieve another users info instead, you can optionally pass in a [User Delegate Token](#user-delegation-token-object) when doing an S2S request. [UDT](#user-delegation-token-object) can only be used when doing an S2S request.</summary>
            /// <param name="xModioDelegationToken">The Delegation Token of the user you are making the request on behalf of.</param>
            internal static async Task<(Error error, UserObject? userObject)> GetAuthenticatedUser(
                string xModioDelegationToken = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me", ModioAPIRequestMethod.Get);

                request.Options.AddHeaderParameter("X-Modio-Delegation-Token", xModioDelegationToken);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<UserObject>(request);
            }
        }
    }
}
