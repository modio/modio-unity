// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Me
        {
            /// <summary>__Deprecated__: This endpoint is deprecated for in-game use and will be removed at a later date. As of March 31st 2024, events will only be returned for existing games for legacy reasons. Any new game should use the [Get User Subscriptions](#get-user-subscriptions) endpoint to fetch the latest mods subscribed to by the authenticated user as this endpoint will no longer return events for games created after that date. If you have any concerns please [reach out to us](https://support.mod.io).<br/><br/> Get events that have been fired specific to the user. Successful request will return an array of [Event Objects](#get-user-events-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken userEventObjects)> GetUserEventsAsJToken(
            GetUserEventsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/events", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>__Deprecated__: This endpoint is deprecated for in-game use and will be removed at a later date. As of March 31st 2024, events will only be returned for existing games for legacy reasons. Any new game should use the [Get User Subscriptions](#get-user-subscriptions) endpoint to fetch the latest mods subscribed to by the authenticated user as this endpoint will no longer return events for games created after that date. If you have any concerns please [reach out to us](https://support.mod.io).<br/><br/> Get events that have been fired specific to the user. Successful request will return an array of [Event Objects](#get-user-events-2). We recommended reading the [filtering documentation](#filtering) to return only the records you want.</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<UserEventObject[]>? userEventObjects)> GetUserEvents(
            GetUserEventsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/me/events", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<UserEventObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetUserEventsFilter FilterGetUserEvents(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetUserEventsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetUserEvents, see <see cref="Me.FilterGetUserEvents"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetUserEventsFilter : SearchFilter<GetUserEventsFilter>
            {
                internal GetUserEventsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the event object.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the event object.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="gameId">Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter GameId(long gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }

                /// <param name="gameId">An ICollection of Unique id of the parent game.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter GameId(ICollection<long> gameId, Filtering condition = Filtering.None)
                {
                    Parameters[$"game_id{condition.ClearText()}"] = gameId;
                    return this;
                }
                

                /// <param name="modId">Unique id of the parent mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter ModId(long modId, Filtering condition = Filtering.None)
                {
                    Parameters[$"mod_id{condition.ClearText()}"] = modId;
                    return this;
                }

                /// <param name="modId">An ICollection of Unique id of the parent mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter ModId(ICollection<long> modId, Filtering condition = Filtering.None)
                {
                    Parameters[$"mod_id{condition.ClearText()}"] = modId;
                    return this;
                }
                

                /// <param name="userId">Unique id of the user who performed the action.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter UserId(long userId, Filtering condition = Filtering.None)
                {
                    Parameters[$"user_id{condition.ClearText()}"] = userId;
                    return this;
                }

                /// <param name="userId">An ICollection of Unique id of the user who performed the action.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter UserId(ICollection<long> userId, Filtering condition = Filtering.None)
                {
                    Parameters[$"user_id{condition.ClearText()}"] = userId;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date mod was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date mod was updated.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }
                

                /// <param name="eventType">Type of change that occurred:<br/><br/>__USER_TEAM_JOIN__ = User has joined a team.<br/>__USER_TEAM_LEAVE__ = User has left a team.<br/>__USER_SUBSCRIBE__ = User has subscribed to a mod.<br/>__USER_UNSUBSCRIBE__ = User has un-subscribed from a mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter EventType(string eventType, Filtering condition = Filtering.None)
                {
                    Parameters[$"event_type{condition.ClearText()}"] = eventType;
                    return this;
                }

                /// <param name="eventType">An ICollection of Type of change that occurred:<br/><br/>__USER_TEAM_JOIN__ = User has joined a team.<br/>__USER_TEAM_LEAVE__ = User has left a team.<br/>__USER_SUBSCRIBE__ = User has subscribed to a mod.<br/>__USER_UNSUBSCRIBE__ = User has un-subscribed from a mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetUserEventsFilter EventType(ICollection<string> eventType, Filtering condition = Filtering.None)
                {
                    Parameters[$"event_type{condition.ClearText()}"] = eventType;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
