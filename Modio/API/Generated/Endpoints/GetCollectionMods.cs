// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Collections
        {
            /// <summary>Get all mods within a collection. Successful request will return a paginated list of [Mod Objects](#mod-object).</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken modObjects)> GetCollectionModsAsJToken(
                long collectionId,
            GetCollectionModsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections/{collectionId}/mods", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all mods within a collection. Successful request will return a paginated list of [Mod Objects](#mod-object).</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<ModObject[]>? modObjects)> GetCollectionMods(
                long collectionId,
            GetCollectionModsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections/{collectionId}/mods", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<ModObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetCollectionModsFilter FilterGetCollectionMods(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetCollectionModsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetCollectionMods, see <see cref="Collections.FilterGetCollectionMods"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetCollectionModsFilter : SearchFilter<GetCollectionModsFilter>
            {
                internal GetCollectionModsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="Offset">Number of results to skip. Defaults to 0.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionModsFilter Offset(long Offset, Filtering condition = Filtering.None)
                {
                    Parameters[$"_offset{condition.ClearText()}"] = Offset;
                    return this;
                }

                /// <param name="Offset">An ICollection of Number of results to skip. Defaults to 0.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionModsFilter Offset(ICollection<long> Offset, Filtering condition = Filtering.None)
                {
                    Parameters[$"_offset{condition.ClearText()}"] = Offset;
                    return this;
                }
                

                /// <param name="Limit">Maximum number of results to return. Defaults to 100.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionModsFilter Limit(long Limit, Filtering condition = Filtering.None)
                {
                    Parameters[$"_limit{condition.ClearText()}"] = Limit;
                    return this;
                }

                /// <param name="Limit">An ICollection of Maximum number of results to return. Defaults to 100.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionModsFilter Limit(ICollection<long> Limit, Filtering condition = Filtering.None)
                {
                    Parameters[$"_limit{condition.ClearText()}"] = Limit;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
