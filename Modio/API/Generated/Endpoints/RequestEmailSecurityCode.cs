// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Authentication
        {
            /// <summary>Request a security code for a user, identified by their e-mail which can then be [exchanged](#email) for an access token. To use this functionality you *must* use your games api_key from your games profile on mod.io. A Successful request will return a [Message Object](#message-object).</summary>
            internal static async Task<(Error error, JToken emailRequestResponse)> RequestEmailSecurityCodeAsJToken(
                EmailAuthenticationRequest? body = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/oauth/emailrequest", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddBody(body);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Request a security code for a user, identified by their e-mail which can then be [exchanged](#email) for an access token. To use this functionality you *must* use your games api_key from your games profile on mod.io. A Successful request will return a [Message Object](#message-object).</summary>
            /// <param name="body"></param>
            internal static async Task<(Error error, EmailRequestResponse? emailRequestResponse)> RequestEmailSecurityCode(
                EmailAuthenticationRequest? body = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/oauth/emailrequest", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddBody(body);

                return await _apiInterface.GetJson<EmailRequestResponse>(request);
            }
        }
    }
}
