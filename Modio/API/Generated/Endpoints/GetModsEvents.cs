// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Events
        {
            /// <summary>
            /// <p>Get all mods events for the corresponding game sorted by latest event first. Successful request will return an array of [Event Objects](#get-mod-events-2).</p>
            /// <p>__NOTE:__ We recommend you poll this endpoint to keep mods up-to-date. If polling this endpoint for updates you should store the `id` or `date_added` of the latest event, and on subsequent requests use that information [in the filter](#filtering), to return only newer events to process.</p>
            /// </summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, JToken modEventObjects)> GetModsEventsAsJToken(
            GetModsEventsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/events", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>
            /// <p>Get all mods events for the corresponding game sorted by latest event first. Successful request will return an array of [Event Objects](#get-mod-events-2).</p>
            /// <p>__NOTE:__ We recommend you poll this endpoint to keep mods up-to-date. If polling this endpoint for updates you should store the `id` or `date_added` of the latest event, and on subsequent requests use that information [in the filter](#filtering), to return only newer events to process.</p>
            /// </summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<ModEventObject[]>? modEventObjects)> GetModsEvents(
            GetModsEventsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/events", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<ModEventObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetModsEventsFilter FilterGetModsEvents(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetModsEventsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetModsEvents, see <see cref="Events.FilterGetModsEvents"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetModsEventsFilter : SearchFilter<GetModsEventsFilter>
            {
                internal GetModsEventsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the event object.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the event object.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="modId">Unique id of the parent mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter ModId(long modId, Filtering condition = Filtering.None)
                {
                    Parameters[$"mod_id{condition.ClearText()}"] = modId;
                    return this;
                }

                /// <param name="modId">An ICollection of Unique id of the parent mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter ModId(ICollection<long> modId, Filtering condition = Filtering.None)
                {
                    Parameters[$"mod_id{condition.ClearText()}"] = modId;
                    return this;
                }
                

                /// <param name="userId">Unique id of the user who performed the action.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter UserId(long userId, Filtering condition = Filtering.None)
                {
                    Parameters[$"user_id{condition.ClearText()}"] = userId;
                    return this;
                }

                /// <param name="userId">An ICollection of Unique id of the user who performed the action.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter UserId(ICollection<long> userId, Filtering condition = Filtering.None)
                {
                    Parameters[$"user_id{condition.ClearText()}"] = userId;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date mod event occurred.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date mod event occurred.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded;
                    return this;
                }
                

                /// <param name="eventType">Type of change that occurred:<br/><br/>__MODFILE_CHANGED__ = Live file changed<br/>__MOD_AVAILABLE__ = Mod is marked as accepted and public<br/>__MOD_UNAVAILABLE__ = Mod is marked as not accepted, deleted or hidden<br/>__MOD_EDITED__ = The mod was updated (triggered when any column value changes)<br/>__MOD_DELETED__ = The mod has been permanently erased. This is an orphan record, looking up this id will return no data<br/>__MOD_TEAM_CHANGED__ = A user has joined or left the mod team<br/>__MOD_COMMENT_ADDED__ = A comment has been published for a mod<br/>__MOD_COMMENT_DELETED__ = A comment has been deleted from a mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter EventType(string eventType, Filtering condition = Filtering.None)
                {
                    Parameters[$"event_type{condition.ClearText()}"] = eventType;
                    return this;
                }

                /// <param name="eventType">An ICollection of Type of change that occurred:<br/><br/>__MODFILE_CHANGED__ = Live file changed<br/>__MOD_AVAILABLE__ = Mod is marked as accepted and public<br/>__MOD_UNAVAILABLE__ = Mod is marked as not accepted, deleted or hidden<br/>__MOD_EDITED__ = The mod was updated (triggered when any column value changes)<br/>__MOD_DELETED__ = The mod has been permanently erased. This is an orphan record, looking up this id will return no data<br/>__MOD_TEAM_CHANGED__ = A user has joined or left the mod team<br/>__MOD_COMMENT_ADDED__ = A comment has been published for a mod<br/>__MOD_COMMENT_DELETED__ = A comment has been deleted from a mod.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter EventType(ICollection<string> eventType, Filtering condition = Filtering.None)
                {
                    Parameters[$"event_type{condition.ClearText()}"] = eventType;
                    return this;
                }
                

                /// <param name="latest">_Default value is true_. Returns only the latest unique events, which is useful for checking if the live `modfile` has changed.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter Latest(bool latest, Filtering condition = Filtering.None)
                {
                    Parameters[$"latest{condition.ClearText()}"] = latest;
                    return this;
                }

                /// <param name="latest">An ICollection of _Default value is true_. Returns only the latest unique events, which is useful for checking if the live `modfile` has changed.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter Latest(ICollection<bool> latest, Filtering condition = Filtering.None)
                {
                    Parameters[$"latest{condition.ClearText()}"] = latest;
                    return this;
                }
                

                /// <param name="subscribed">_Default value is false_. Returns only events connected to mods the __authenticated user__ is subscribed to, which is useful for keeping the users mods up-to-date.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter Subscribed(bool subscribed, Filtering condition = Filtering.None)
                {
                    Parameters[$"subscribed{condition.ClearText()}"] = subscribed;
                    return this;
                }

                /// <param name="subscribed">An ICollection of _Default value is false_. Returns only events connected to mods the __authenticated user__ is subscribed to, which is useful for keeping the users mods up-to-date.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetModsEventsFilter Subscribed(ICollection<bool> subscribed, Filtering condition = Filtering.None)
                {
                    Parameters[$"subscribed{condition.ClearText()}"] = subscribed;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
