// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class General
        {
            /// <summary>
            /// <p>Get the user that is the original _submitter_ of a resource. Successful request will return a single [User Object](#user-object).</p>
            /// <p>__NOTE:__ Mods and games can be managed by teams of users, for the most accurate information you should use the [Team endpoints](#teams).</p>
            /// </summary>
            internal static async Task<(Error error, JToken userObject)> GetResourceOwnerAsJToken(

            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/general/ownership", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>
            /// <p>Get the user that is the original _submitter_ of a resource. Successful request will return a single [User Object](#user-object).</p>
            /// <p>__NOTE:__ Mods and games can be managed by teams of users, for the most accurate information you should use the [Team endpoints](#teams).</p>
            /// </summary>
            internal static async Task<(Error error, UserObject? userObject)> GetResourceOwner(

            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/general/ownership", ModioAPIRequestMethod.Post, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<UserObject>(request);
            }
        }
    }
}
