// <auto-generated />
using System;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class FilesMultipartUploads
        {
            /// <summary>
            /// <p>Add a new multipart upload part to an [existing upload session](#create-multipart-upload-session). All parts must be exactly 50MB (Mebibyte) in size unless it is the final part which can be smaller. A successful request will return a single [Multipart Upload Part Object](#multipart-upload-object).</p>
            /// <p>__NOTE__: Unlike other POST endpoints on this service, the body of this request should contain no form parameters and instead be the data described in the byte range of the Content-Range header of the request.</p>
            /// </summary>
            /// <param name="uploadId">The universally unique ID (UUID) that represents your upload session.</param>
            /// <param name="modId">Mod id</param>
            /// <param name="contentRange">A valid content-range header including both start and finish bytes (zero-inclusive) and the total file size in bytes. A valid header looks like: <em>Content-Range: bytes 0-1500/250000</em></param>
            /// <param name="digest">An optional header that allows us to conduct a checksum comparison against the provided input body. The request will be rejected if the checksums do not match. Supported algorithms are: SHA-256</param>
            internal static async Task<(Error error, JToken multipartUploadPartObject)> AddMultipartUploadPartAsJToken(
                string uploadId,
                long modId,
                string contentRange,
                byte[] bytes,
                string digest = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/files/multipart", ModioAPIRequestMethod.Put, ModioAPIRequestContentType.ByteArray);
                request.Options.AddQueryParameter("upload_id", uploadId);
                request.Options.AddHeaderParameter("Content-Range", contentRange);
                request.Options.AddHeaderParameter("Digest", digest);
                request.Options.AddBody(bytes);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson(request);
            }

            /// <summary>
            /// <p>Add a new multipart upload part to an [existing upload session](#create-multipart-upload-session). All parts must be exactly 50MB (Mebibyte) in size unless it is the final part which can be smaller. A successful request will return a single [Multipart Upload Part Object](#multipart-upload-object).</p>
            /// <p>__NOTE__: Unlike other POST endpoints on this service, the body of this request should contain no form parameters and instead be the data described in the byte range of the Content-Range header of the request.</p>
            /// </summary>
            /// <param name="uploadId">The universally unique ID (UUID) that represents your upload session.</param>
            /// <param name="modId">Mod id</param>
            /// <param name="contentRange">A valid content-range header including both start and finish bytes (zero-inclusive) and the total file size in bytes. A valid header looks like: <em>Content-Range: bytes 0-1500/250000</em></param>
            /// <param name="digest">An optional header that allows us to conduct a checksum comparison against the provided input body. The request will be rejected if the checksums do not match. Supported algorithms are: SHA-256</param>
            internal static async Task<(Error error, MultipartUploadPartObject? multipartUploadPartObject)> AddMultipartUploadPart(
                string uploadId,
                long modId,
                string contentRange,
                byte[] bytes,
                string digest = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/files/multipart", ModioAPIRequestMethod.Put, ModioAPIRequestContentType.ByteArray);
                request.Options.AddQueryParameter("upload_id", uploadId);
                request.Options.AddHeaderParameter("Content-Range", contentRange);
                request.Options.AddHeaderParameter("Digest", digest);
                request.Options.AddBody(bytes);
                request.Options.RequireAuthentication();

                return await _apiInterface.GetJson<MultipartUploadPartObject>(request);
            }
        }
    }
}
