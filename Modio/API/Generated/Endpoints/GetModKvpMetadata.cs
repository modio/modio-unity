// <auto-generated />

/*
 *
 *
 * DO NOT REGENERATE
 * 
 * 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Metadata
        {
            /// <summary>Get all metadata stored by the game developer for this mod as searchable key value pairs. Successful request will return an array of [Metadata KVP Objects](#get-mod-kvp-metadata-2).<br/><br/>__NOTE:__ Metadata can also be stored as `metadata_blob` in the [Mod Object](#mod-object).</summary>
            /// <param name="filter">Filter to apply to the request.</param>
            /// <param name="modId">Mod id</param>
            internal static async Task<(Error error, JToken metadataKvpObjects)> GetModKvpMetadataAsJToken(
                long modId,
                GetModKvpMetadataFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/metadatakvp", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                return await _apiInterface.GetJson(request);
            }

            /// <summary>Get all metadata stored by the game developer for this mod as searchable key value pairs. Successful request will return an array of [Metadata KVP Objects](#get-mod-kvp-metadata-2).<br/><br/>__NOTE:__ Metadata can also be stored as `metadata_blob` in the [Mod Object](#mod-object).</summary>
            internal static async Task<(Error error, Pagination<MetadataKvpObject[]>? metadataKvpObjects)> GetModKvpMetadata(
                long modId,
                GetModKvpMetadataFilter filter = null
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/mods/{modId}/metadatakvp", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter ?? FilterGetModKvpMetadata());

                return await _apiInterface.GetJson<Pagination<MetadataKvpObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetModKvpMetadataFilter FilterGetModKvpMetadata(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetModKvpMetadataFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetModKvpMetadata, see <see cref="Metadata.FilterGetModKvpMetadata"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetModKvpMetadataFilter : SearchFilter<GetModKvpMetadataFilter>
            {
                internal GetModKvpMetadataFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                { }
            }
#endregion
        }
    }
}
