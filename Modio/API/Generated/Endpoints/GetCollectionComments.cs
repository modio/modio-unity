// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Modio.API.SchemaDefinitions;
using Modio.Errors;
using Modio.Extensions;

namespace Modio.API
{
    public static partial class ModioAPI
    {
        public static partial class Comments
        {
            /// <summary>
            /// <p>Get all comments posted in the collections profile. Successful request will return an array</p>
            /// <p>of [Comment Objects](#get-collection-comments-2). We recommended reading the [filtering documentation](#filtering)</p>
            /// <p>to return only the records you want.</p>
            /// </summary>
            /// <param name="filter">Filter to apply to the request.</param>
            /// <param name="collectionId">Collection id</param>
            internal static async Task<(Error error, JToken commentObjects)> GetCollectionCommentsAsJToken(
                    long collectionId
,
            GetCollectionCommentsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections/{collectionId}/comments", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);


                return await _apiInterface.GetJson(request);
            }

            /// <summary>
            /// <p>Get all comments posted in the collections profile. Successful request will return an array</p>
            /// <p>of [Comment Objects](#get-collection-comments-2). We recommended reading the [filtering documentation](#filtering)</p>
            /// <p>to return only the records you want.</p>
            /// </summary>
            /// <param name="filter">Filter to apply to the request.</param>
            internal static async Task<(Error error, Pagination<CommentObject[]>? commentObjects)> GetCollectionComments(
long collectionId
,
            GetCollectionCommentsFilter filter
            ) {
                if (!IsInitialized()) return (new Error(ErrorCode.API_NOT_INITIALIZED), null);

                using var request = ModioAPIRequest.New($"/games/{{game-id}}/collections/{collectionId}/comments", ModioAPIRequestMethod.Get, ModioAPIRequestContentType.FormUrlEncoded);

                request.Options.AddFilterParameters(filter);

                return await _apiInterface.GetJson<Pagination<CommentObject[]>>(request);
            }
#region Filter
        
            /// <summary>Constructs a filter built for this request type.</summary>
            /// <param name="pageIndex">The search will skip <c>pageIndex * pageSize</c> results and return (up to) the following <see cref="pageSize"/> results.</param>
            /// <param name="pageSize">Limit the number of results returned (100 max).<p>Use <see cref="SetPageIndex"/> to skip results and return later results.</p></param>
            public static GetCollectionCommentsFilter FilterGetCollectionComments(
                int pageIndex = 0,
                int pageSize = 100
            ) 
            => new GetCollectionCommentsFilter(
                pageIndex, 
                pageSize
            );
            
            /// <summary>
            /// Filter for GetCollectionComments, see <see cref="Comments.FilterGetCollectionComments"/>
            /// to construct this filter <br/>
            /// Filtering options:<br/>
            /// </summary>
            public class GetCollectionCommentsFilter : SearchFilter<GetCollectionCommentsFilter>
            {
                internal GetCollectionCommentsFilter(
                    int pageIndex,
                    int pageSize
                ) : base(pageIndex, pageSize) 
                {
                }

                /// <param name="id">Unique id of the comment.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter Id(long id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }

                /// <param name="id">An ICollection of Unique id of the comment.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter Id(ICollection<long> id, Filtering condition = Filtering.None)
                {
                    Parameters[$"id{condition.ClearText()}"] = id;
                    return this;
                }
                

                /// <param name="resourceId">Unique id of the resource.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter ResourceId(long resourceId, Filtering condition = Filtering.None)
                {
                    Parameters[$"resource_id{condition.ClearText()}"] = resourceId;
                    return this;
                }

                /// <param name="resourceId">An ICollection of Unique id of the resource.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter ResourceId(ICollection<long> resourceId, Filtering condition = Filtering.None)
                {
                    Parameters[$"resource_id{condition.ClearText()}"] = resourceId;
                    return this;
                }
                

                /// <param name="submittedBy">Unique id of the user who posted the comment.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter SubmittedBy(long submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }

                /// <param name="submittedBy">An ICollection of Unique id of the user who posted the comment.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter SubmittedBy(ICollection<long> submittedBy, Filtering condition = Filtering.None)
                {
                    Parameters[$"submitted_by{condition.ClearText()}"] = submittedBy;
                    return this;
                }
                

                /// <param name="dateAdded">Unix timestamp of date comment was posted.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter DateAdded(long dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampToHour();
                    return this;
                }

                /// <param name="dateAdded">An ICollection of Unix timestamp of date comment was posted.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter DateAdded(ICollection<long> dateAdded, Filtering condition = Filtering.None)
                {
                    Parameters[$"date_added{condition.ClearText()}"] = dateAdded.RoundTimestampsToHour();
                    return this;
                }
                

                /// <param name="replyId">Id of the parent comment this comment is replying to (can be 0 if the comment is not a reply).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter ReplyId(long replyId, Filtering condition = Filtering.None)
                {
                    Parameters[$"reply_id{condition.ClearText()}"] = replyId;
                    return this;
                }

                /// <param name="replyId">An ICollection of Id of the parent comment this comment is replying to (can be 0 if the comment is not a reply).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter ReplyId(ICollection<long> replyId, Filtering condition = Filtering.None)
                {
                    Parameters[$"reply_id{condition.ClearText()}"] = replyId;
                    return this;
                }
                

                /// <param name="threadPosition">Levels of nesting in a comment thread. You should order by this field, to maintain comment grouping. How it works:<br/><br/>- The first comment will have the position '01'.<br/>- The second comment will have the position '02'.<br/>- If someone responds to the second comment the position will be '02.01'. <br/>- A maximum of 3 levels is supported.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter ThreadPosition(string threadPosition, Filtering condition = Filtering.None)
                {
                    Parameters[$"thread_position{condition.ClearText()}"] = threadPosition;
                    return this;
                }

                /// <param name="threadPosition">An ICollection of Levels of nesting in a comment thread. You should order by this field, to maintain comment grouping. How it works:<br/><br/>- The first comment will have the position '01'.<br/>- The second comment will have the position '02'.<br/>- If someone responds to the second comment the position will be '02.01'. <br/>- A maximum of 3 levels is supported.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter ThreadPosition(ICollection<string> threadPosition, Filtering condition = Filtering.None)
                {
                    Parameters[$"thread_position{condition.ClearText()}"] = threadPosition;
                    return this;
                }
                

                /// <param name="karma">Karma received for the comment (can be positive or negative).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter Karma(long karma, Filtering condition = Filtering.None)
                {
                    Parameters[$"karma{condition.ClearText()}"] = karma;
                    return this;
                }

                /// <param name="karma">An ICollection of Karma received for the comment (can be positive or negative).</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter Karma(ICollection<long> karma, Filtering condition = Filtering.None)
                {
                    Parameters[$"karma{condition.ClearText()}"] = karma;
                    return this;
                }
                

                /// <param name="content">Contents of the comment.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter Content(string content, Filtering condition = Filtering.None)
                {
                    Parameters[$"content{condition.ClearText()}"] = content;
                    return this;
                }

                /// <param name="content">An ICollection of Contents of the comment.</param>
                /// <param name="condition"><see cref="Filtering"/></param>
                public GetCollectionCommentsFilter Content(ICollection<string> content, Filtering condition = Filtering.None)
                {
                    Parameters[$"content{condition.ClearText()}"] = content;
                    return this;
                }
                
            }
#endregion
        
        }
    }
}
