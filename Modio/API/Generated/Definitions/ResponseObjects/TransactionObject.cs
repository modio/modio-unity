// <auto-generated />
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

namespace Modio.API.SchemaDefinitions{
    [JsonObject]
    internal readonly partial struct TransactionObject 
    {
        /// <summary>Unique transaction id.</summary>
        internal readonly long Id;
        /// <summary>The universally unique ID (UUID) that represents a unique tranasction with the payment gateway.</summary>
        internal readonly string GatewayUuid;
        /// <summary>The gateway that processed the transaction.</summary>
        internal readonly string GatewayName;
        /// <summary>The unique monetization account id that actioned the transaction.</summary>
        internal readonly long AccountId;
        /// <summary>The gross amount of the transaction.</summary>
        internal readonly long GrossAmount;
        /// <summary>The net amount of the transaction.</summary>
        internal readonly long NetAmount;
        /// <summary>The platform fee of the transaction.</summary>
        internal readonly long PlatformFee;
        /// <summary>The gateway fee of the transaction.</summary>
        internal readonly long GatewayFee;
        /// <summary>The tax amount of the transaction.</summary>
        internal readonly long Tax;
        /// <summary>The tax type on the processed transaction.</summary>
        internal readonly string TaxType;
        /// <summary>The currency type on the processed transaction.</summary>
        internal readonly string Currency;
        /// <summary>The amount of virtual currency associated with the transaction. Will be omitted when no tokens are involved.</summary>
        internal readonly long Tokens;
        /// <summary>The transaction status type on the processed transaction. I.e. is it paid, pending, refunded or cleared.</summary>
        internal readonly string TransactionType;
        /// <summary>The monetizaton type on the processed transaction. I.e. is it fiat, tokens or external.</summary>
        internal readonly string MonetizationType;
        /// <summary>The beginging purchase date the transaction started on in a human reabled date time stamp.</summary>
        internal readonly string PurchaseDate;
        /// <summary>The timestamp of date the transaction status was recorded in micro time precsion.</summary>
        internal readonly string CreatedAt;
        /// <summary>Array containing payment method objects.</summary>
        internal readonly PaymentMethodObject[] PaymentMethod;
        /// <summary>Array containing line item objects.</summary>
        internal readonly LineItemsObject[] LineItems;

        /// <param name="id">Unique transaction id.</param>
        /// <param name="gatewayUuid">The universally unique ID (UUID) that represents a unique tranasction with the payment gateway.</param>
        /// <param name="gatewayName">The gateway that processed the transaction.</param>
        /// <param name="accountId">The unique monetization account id that actioned the transaction.</param>
        /// <param name="grossAmount">The gross amount of the transaction.</param>
        /// <param name="netAmount">The net amount of the transaction.</param>
        /// <param name="platformFee">The platform fee of the transaction.</param>
        /// <param name="gatewayFee">The gateway fee of the transaction.</param>
        /// <param name="tax">The tax amount of the transaction.</param>
        /// <param name="taxType">The tax type on the processed transaction.</param>
        /// <param name="currency">The currency type on the processed transaction.</param>
        /// <param name="tokens">The amount of virtual currency associated with the transaction. Will be omitted when no tokens are involved.</param>
        /// <param name="transactionType">The transaction status type on the processed transaction. I.e. is it paid, pending, refunded or cleared.</param>
        /// <param name="monetizationType">The monetizaton type on the processed transaction. I.e. is it fiat, tokens or external.</param>
        /// <param name="purchaseDate">The beginging purchase date the transaction started on in a human reabled date time stamp.</param>
        /// <param name="createdAt">The timestamp of date the transaction status was recorded in micro time precsion.</param>
        /// <param name="paymentMethod">Array containing payment method objects.</param>
        /// <param name="lineItems">Array containing line item objects.</param>
        [JsonConstructor]
        public TransactionObject(
            long id,
            string gateway_uuid,
            string gateway_name,
            long account_id,
            long gross_amount,
            long net_amount,
            long platform_fee,
            long gateway_fee,
            long tax,
            string tax_type,
            string currency,
            long tokens,
            string transaction_type,
            string monetization_type,
            string purchase_date,
            string created_at,
            PaymentMethodObject[] payment_method,
            LineItemsObject[] line_items
        ) {
            Id = id;
            GatewayUuid = gateway_uuid;
            GatewayName = gateway_name;
            AccountId = account_id;
            GrossAmount = gross_amount;
            NetAmount = net_amount;
            PlatformFee = platform_fee;
            GatewayFee = gateway_fee;
            Tax = tax;
            TaxType = tax_type;
            Currency = currency;
            Tokens = tokens;
            TransactionType = transaction_type;
            MonetizationType = monetization_type;
            PurchaseDate = purchase_date;
            CreatedAt = created_at;
            PaymentMethod = payment_method;
            LineItems = line_items;
        }
    }
}
