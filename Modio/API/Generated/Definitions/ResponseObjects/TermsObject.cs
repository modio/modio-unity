// <auto-generated />
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

namespace Modio.API.SchemaDefinitions{
    [JsonObject]
    internal readonly partial struct TermsObject 
    {
        /// <summary>Terms text in plaintext formatting.</summary>
        internal readonly string Plaintext;
        /// <summary>Terms text in HTML formatting.</summary>
        internal readonly string Html;
        /// <summary>Buttons to embed into the Terms.</summary>
        internal readonly EmbeddedButtons Buttons;
        /// <summary>Links to embed into the Terms.</summary>
        internal readonly EmbeddedLinks Links;

        /// <param name="plaintext">Terms text in plaintext formatting.</param>
        /// <param name="html">Terms text in HTML formatting.</param>
        /// <param name="buttons">Buttons to embed into the Terms.</param>
        /// <param name="links">Links to embed into the Terms.</param>
        [JsonConstructor]
        public TermsObject(
            string plaintext,
            string html,
            EmbeddedButtons buttons,
            EmbeddedLinks links
        ) {
            Plaintext = plaintext;
            Html = html;
            Buttons = buttons;
            Links = links;
        }

        [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
        internal readonly partial struct EmbeddedButtons
        {
            /// <summary>I Agree Button.</summary>
            internal readonly EmbeddedAgree Agree;
            /// <summary>Disagree Button.</summary>
            internal readonly EmbeddedDisagree Disagree;

            [JsonConstructor]
            public EmbeddedButtons(
                EmbeddedAgree agree,
                EmbeddedDisagree disagree
            ) {
                Agree = agree;
                Disagree = disagree;
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedAgree
            {
                /// <summary>Button text.</summary>
                internal readonly string Text;

                [JsonConstructor]
                public EmbeddedAgree(
                    string text
                ) {
                    Text = text;
                }
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedDisagree
            {
                /// <summary>Button text.</summary>
                internal readonly string Text;

                [JsonConstructor]
                public EmbeddedDisagree(
                    string text
                ) {
                    Text = text;
                }
            }
        }

        [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
        internal readonly partial struct EmbeddedLinks
        {
            /// <summary>Website link.</summary>
            internal readonly EmbeddedWebsite Website;
            /// <summary>Terms of Use link.</summary>
            internal readonly EmbeddedTerms Terms;
            /// <summary>Privacy Policy link.</summary>
            internal readonly EmbeddedPrivacy Privacy;
            /// <summary>Refund Policy link.</summary>
            internal readonly EmbeddedRefund Refund;
            /// <summary>Manage User Account link.</summary>
            internal readonly EmbeddedManage Manage;

            [JsonConstructor]
            public EmbeddedLinks(
                EmbeddedWebsite website,
                EmbeddedTerms terms,
                EmbeddedPrivacy privacy,
                EmbeddedRefund refund,
                EmbeddedManage manage
            ) {
                Website = website;
                Terms = terms;
                Privacy = privacy;
                Refund = refund;
                Manage = manage;
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedWebsite
            {
                /// <summary>Text for the link.</summary>
                internal readonly string Text;
                /// <summary>Link to the mod.io website.</summary>
                internal readonly string Url;
                /// <summary>Is this link required.</summary>
                internal readonly bool Required;

                [JsonConstructor]
                public EmbeddedWebsite(
                    string text,
                    string url,
                    bool required
                ) {
                    Text = text;
                    Url = url;
                    Required = required;
                }
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedTerms
            {
                /// <summary>Text for the link.</summary>
                internal readonly string Text;
                /// <summary>Link to the mod.io Terms of Use.</summary>
                internal readonly string Url;
                /// <summary>Is this link required.</summary>
                internal readonly bool Required;

                [JsonConstructor]
                public EmbeddedTerms(
                    string text,
                    string url,
                    bool required
                ) {
                    Text = text;
                    Url = url;
                    Required = required;
                }
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedPrivacy
            {
                /// <summary>Text for the link.</summary>
                internal readonly string Text;
                /// <summary>Link to the mod.io Privacy Policy.</summary>
                internal readonly string Url;
                /// <summary>Is this link required.</summary>
                internal readonly bool Required;

                [JsonConstructor]
                public EmbeddedPrivacy(
                    string text,
                    string url,
                    bool required
                ) {
                    Text = text;
                    Url = url;
                    Required = required;
                }
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedRefund
            {
                /// <summary>Text for the link.</summary>
                internal readonly string Text;
                /// <summary>Link to the mod.io Refund Policy.</summary>
                internal readonly string Url;
                /// <summary>Is this link required.</summary>
                internal readonly bool Required;

                [JsonConstructor]
                public EmbeddedRefund(
                    string text,
                    string url,
                    bool required
                ) {
                    Text = text;
                    Url = url;
                    Required = required;
                }
            }

            [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
            internal readonly partial struct EmbeddedManage
            {
                /// <summary>Text for the link.</summary>
                internal readonly string Text;
                /// <summary>Link to the mod.io page to manage a User's Account.</summary>
                internal readonly string Url;
                /// <summary>Is this link required.</summary>
                internal readonly bool Required;

                [JsonConstructor]
                public EmbeddedManage(
                    string text,
                    string url,
                    bool required
                ) {
                    Text = text;
                    Url = url;
                    Required = required;
                }
            }
        }
    }
}
