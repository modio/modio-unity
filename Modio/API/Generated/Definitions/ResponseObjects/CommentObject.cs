// <auto-generated />
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

namespace Modio.API.SchemaDefinitions{
    [JsonObject]
    internal readonly partial struct CommentObject 
    {
        /// <summary>Unique id of the comment.</summary>
        internal readonly long Id;
        /// <summary>Unique game id (if applicable).</summary>
        internal readonly long GameId;
        /// <summary>Deprecated: Please use resource_id instead, this will be removed in subsequent API version.</summary>
        internal readonly long ModId;
        /// <summary>Unique id of the parent resource.</summary>
        internal readonly long ResourceId;
        /// <summary>The user who published the comment.</summary>
        internal readonly UserObject User;
        /// <summary>Unix timestamp of date the comment was posted.</summary>
        internal readonly long DateAdded;
        /// <summary>Id of the parent comment this comment is replying to (can be 0 if the comment is not a reply).</summary>
        internal readonly long ReplyId;
        /// <summary>Levels of nesting in a comment thread. How it works:<br/><br/>- The first comment will have the position '01'.<br/>- The second comment will have the position '02'.<br/>- If someone responds to the second comment the position will be '02.01'.<br/>- A maximum of 3 levels is supported.</summary>
        internal readonly string ThreadPosition;
        /// <summary>Karma received for the comment (can be postive or negative).</summary>
        internal readonly long Karma;
        /// <summary>Deprecated: No longer used and will be removed in subsequent API version.</summary>
        internal readonly long KarmaGuest;
        /// <summary>Contents of the comment.</summary>
        internal readonly string Content;
        /// <summary>The options specified by the mod or guide team. Available options are:<br/><br/>__0__ = All of the options below are disabled<br/>__1__ = Pinned comment<br/>__2__ = Locked comment<br/>__?__ = Add the options you want together, to enable multiple features (see [BITWISE fields](#bitwise-and-bitwise-and))</summary>
        internal readonly long Options;

        /// <param name="id">Unique id of the comment.</param>
        /// <param name="gameId">Unique game id (if applicable).</param>
        /// <param name="modId">Deprecated: Please use resource_id instead, this will be removed in subsequent API version.</param>
        /// <param name="resourceId">Unique id of the parent resource.</param>
        /// <param name="user">The user who published the comment.</param>
        /// <param name="dateAdded">Unix timestamp of date the comment was posted.</param>
        /// <param name="replyId">Id of the parent comment this comment is replying to (can be 0 if the comment is not a reply).</param>
        /// <param name="threadPosition">Levels of nesting in a comment thread. How it works:<br/><br/>- The first comment will have the position '01'.<br/>- The second comment will have the position '02'.<br/>- If someone responds to the second comment the position will be '02.01'.<br/>- A maximum of 3 levels is supported.</param>
        /// <param name="karma">Karma received for the comment (can be postive or negative).</param>
        /// <param name="karmaGuest">Deprecated: No longer used and will be removed in subsequent API version.</param>
        /// <param name="content">Contents of the comment.</param>
        /// <param name="options">The options specified by the mod or guide team. Available options are:<br/><br/>__0__ = All of the options below are disabled<br/>__1__ = Pinned comment<br/>__2__ = Locked comment<br/>__?__ = Add the options you want together, to enable multiple features (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
        [JsonConstructor]
        public CommentObject(
            long id,
            long game_id,
            long mod_id,
            long resource_id,
            UserObject user,
            long date_added,
            long reply_id,
            string thread_position,
            long karma,
            long karma_guest,
            string content,
            long options
        ) {
            Id = id;
            GameId = game_id;
            ModId = mod_id;
            ResourceId = resource_id;
            User = user;
            DateAdded = date_added;
            ReplyId = reply_id;
            ThreadPosition = thread_position;
            Karma = karma;
            KarmaGuest = karma_guest;
            Content = content;
            Options = options;
        }
    }
}
