// <auto-generated />
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

namespace Modio.API.SchemaDefinitions{
    [JsonObject]
    internal readonly partial struct AddReportRequest : IApiRequest
    {
        static readonly Dictionary<string, object> _bodyParameters = new Dictionary<string, object>();

        /// <summary></summary>
        internal readonly string Resource;
        /// <summary></summary>
        internal readonly long Id;
        /// <summary></summary>
        internal readonly long Type;
        /// <summary>Optional category for the report, applicable to reports where `type` isset to `2` (<i>Not Working</i>) reports. May be one of:<br/><br/>- `0`: No reason provided<br/>-  `1`: Crashes Game<br/>-  `2`: Does Not Load<br/>-  `3`: Conflicts With Other Mods<br/>-  `4`: Missing Dependencies<br/>-  `5`: Installation Issues<br/>-  `6`: Buggy Behavior<br/>-  `7`: Incompatible With Game Version<br/>-  `8`: File Corruption</summary>
        internal readonly long Reason;
        /// <summary>Optional platform for the report, applicable to reports where `type`is set to `2` (<i>Not Working</i>) reports. If X-Modio-Platform is present, platform will beset automatically if not provided. May be one of:<br/><br/>- `windows`<br/>-  `mac`<br/>-  `linux`<br/>-  `android`<br/>-  `ios`<br/>-  `xboxone`<br/>-  `xboxseriesx`<br/>-  `ps4`<br/>-  `ps5`<br/>-  `switch`<br/>-  `oculus`<br/>-  `source`<br/>-  `xboxone_draft`</summary>
        internal readonly string Platforms;
        /// <summary></summary>
        internal readonly string Name;
        /// <summary></summary>
        internal readonly string Contact;
        /// <summary></summary>
        internal readonly string Summary;

        /// <param name="resource"></param>
        /// <param name="id"></param>
        /// <param name="type"></param>
        /// <param name="reason">Optional category for the report, applicable to reports where `type` isset to `2` (<i>Not Working</i>) reports. May be one of:<br/><br/>- `0`: No reason provided<br/>-  `1`: Crashes Game<br/>-  `2`: Does Not Load<br/>-  `3`: Conflicts With Other Mods<br/>-  `4`: Missing Dependencies<br/>-  `5`: Installation Issues<br/>-  `6`: Buggy Behavior<br/>-  `7`: Incompatible With Game Version<br/>-  `8`: File Corruption</param>
        /// <param name="platforms">Optional platform for the report, applicable to reports where `type`is set to `2` (<i>Not Working</i>) reports. If X-Modio-Platform is present, platform will beset automatically if not provided. May be one of:<br/><br/>- `windows`<br/>-  `mac`<br/>-  `linux`<br/>-  `android`<br/>-  `ios`<br/>-  `xboxone`<br/>-  `xboxseriesx`<br/>-  `ps4`<br/>-  `ps5`<br/>-  `switch`<br/>-  `oculus`<br/>-  `source`<br/>-  `xboxone_draft`</param>
        /// <param name="name"></param>
        /// <param name="contact"></param>
        /// <param name="summary"></param>
        [JsonConstructor]
        public AddReportRequest(
            string resource,
            long id,
            long type,
            long reason,
            string platforms,
            string name,
            string contact,
            string summary
        ) {
            Resource = resource;
            Id = id;
            Type = type;
            Reason = reason;
            Platforms = platforms;
            Name = name;
            Contact = contact;
            Summary = summary;
        }

        public IReadOnlyDictionary<string, object> GetBodyParameters()
        {
            _bodyParameters.Clear();

            _bodyParameters.Add("resource", Resource);
            _bodyParameters.Add("id", Id);
            _bodyParameters.Add("type", Type);
            _bodyParameters.Add("reason", Reason);
            _bodyParameters.Add("platforms", Platforms);
            _bodyParameters.Add("name", Name);
            _bodyParameters.Add("contact", Contact);
            _bodyParameters.Add("summary", Summary);

            return _bodyParameters;
        }
    }
}
