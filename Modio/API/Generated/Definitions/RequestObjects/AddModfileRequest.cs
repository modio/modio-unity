// <auto-generated />

/*
 *
 *      DO NOT REGENERATE
 *
 */

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

namespace Modio.API.SchemaDefinitions{
    [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
    internal readonly partial struct AddModfileRequest : IApiRequest
    {
        static readonly Dictionary<string, object> _bodyParameters = new Dictionary<string, object>();
#nullable enable
        /// <summary>Rules for adding a file.</summary>
        internal readonly ModioAPIFileParameter Filedata;
        /// <summary>Rules for adding a file.</summary>
        internal readonly string? Version;
        /// <summary>Rules for adding a file.</summary>
        internal readonly string? Changelog;
        /// <summary>Rules for adding a file.</summary>
        internal readonly string? MetadataBlob;
        /// <summary>The tags that a game can allow. The tags will be ordered by the order of this array.</summary>
        internal readonly string[]? Platforms;
        /// <summary>The upload id used by multi-part uploads.</summary>
        internal readonly string? UploadId;
#nullable disable

        /// <param name="filedata">Rules for adding a file.</param>
        /// <param name="version">Rules for adding a file.</param>
        /// <param name="changelog">Rules for adding a file.</param>
        /// <param name="metadataBlob">Rules for adding a file.</param>
        /// <param name="platforms">The tags that a game can allow. The tags will be ordered by the order of this array.</param>
        /// <param name="uploadId">Rules for adding a file.</param>

        [JsonConstructor]
        public AddModfileRequest(
            ModioAPIFileParameter filedata,
#nullable enable
            string? version,
            string? changelog,
            string? metadataBlob,
            string[]? platforms,
            string? uploadId
#nullable disable
        ) {
            Filedata = filedata;
            Version = version;
            Changelog = changelog;
            MetadataBlob = metadataBlob;
            Platforms = platforms;
            UploadId = uploadId;
        }

        public IReadOnlyDictionary<string, object> GetBodyParameters()
        {
            _bodyParameters.Clear();

            _bodyParameters.Add("filedata", Filedata);
            if (string.IsNullOrEmpty(Version)) _bodyParameters.Add("version", Version);
            if (string.IsNullOrEmpty(Changelog)) _bodyParameters.Add("changelog", Changelog);
            if (string.IsNullOrEmpty(MetadataBlob)) _bodyParameters.Add("metadata_blob", MetadataBlob);
            if (Platforms is not null && Platforms.Length > 0) _bodyParameters.Add("platforms", Platforms);
            if (string.IsNullOrEmpty(UploadId)) _bodyParameters.Add("upload_id", UploadId);

            return _bodyParameters;
        }
    }
}
