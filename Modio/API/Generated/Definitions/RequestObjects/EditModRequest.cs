// <auto-generated />
// not actually

/*
 *
 *      DO NOT REGENERATE
 * 
 */

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

namespace Modio.API.SchemaDefinitions{
    [JsonObject(NamingStrategyType = typeof(SnakeCaseNamingStrategy))]
    internal readonly partial struct EditModRequest : IApiRequest
    {
        static readonly Dictionary<string, object> _bodyParameters = new Dictionary<string, object>();
        
#nullable enable
        // TODO: Document
        internal readonly string? Name;
        /// <summary>The name ID is used in the URL to identify the mod. It must be unique and contain only lowercase letters, numbers, and dashes.</summary>
        internal readonly string? NameId;
        // TODO: Document
        internal readonly string? Summary;
        // TODO: Document
        internal readonly string? Description;
        // TODO: Document
        internal readonly ModioAPIFileParameter? Logo;
        // TODO: Document
        internal readonly long? Visible;
        // TODO: Document
        internal readonly long? MaturityOption;
        // TODO: Document
        internal readonly long? CommunityOptions;
        /// <summary>Metadata that accepts any string-based arbitrary value, up to a maximum of 50,000 characters.</summary>
        internal readonly string? MetadataBlob;
        /// <summary>When providing this attribute, if the input array contains tags, they will entirely replace any existing tags assigned to the mod. If an empty array is passed, all currently assigned tags will be removed. If null or omitted, no changes will be made to the assigned tags.</summary>
        internal readonly string[]? Tags;
        // TODO: Document
        internal readonly long? MonetizationOptions;
        // TODO: Document
        internal readonly long? Price;
        // TODO: Document
        internal readonly long? Stock;
#nullable disable

        /// <param name="name"></param>
        /// <param name="nameId">The name ID is used in the URL to identify the mod. It must be unique and contain only lowercase letters, numbers, and dashes.</param>
        /// <param name="summary"></param>
        /// <param name="description"></param>
        /// <param name="logo"></param>
        /// <param name="visible">Visibility of the mod (best if this field is controlled by mod admins, see [status and visibility](#status-amp-visibility) for details):<br/><br/>__0__ = Hidden<br/>__1__ = Public</param>
        /// <param name="maturity_option">Mature content found in this mod.<br/><br/>__NOTE:__ The value of this field will default to 0 unless the parent game allows you to flag mature content (see `maturity_options` field in [Game Object](#game-object)).<br/><br/>__0__ = None set<br/>__1__ = Alcohol<br/>__2__ = Drugs<br/>__4__ = Violence<br/>__8__ = Explicit<br/>__?__ = Add the options you want together, to enable multiple options (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
        /// <param name="community_options">Community features enabled for this mod:<br/><br/>__0__ = All the options below are disabled<br/>__1__ = Enable comments<br/>__64__ = Enable previews<br/>__128__ = Enable preview URLs<br/>__1024__ = Allow dependencies<br/>__?__ = Add the options you want together, to enable multiple options (see [BITWISE fields](#bitwise-and-bitwise-and))</param>
        /// <param name="metadataBlob">Metadata that accepts any string-based arbitrary value, up to a maximum of 50,000 characters.</param>
        /// <param name="tags">When providing this attribute, if the input array contains tags, they will entirely replace any existing tags assigned to the mod. If an empty array is passed, all currently assigned tags will be removed. If null or omitted, no changes will be made to the assigned tags.</param>
        [JsonConstructor]
        public EditModRequest(
#nullable enable
            string? name,
            string? nameId,
            string? summary,
            string? description,
            ModioAPIFileParameter? logo,
            long? visible,
            long? maturity_option,
            long? community_options,
            string? metadataBlob,
            string[]? tags,
            long? monetizationOptions,
            long? price,
            long? stock
#nullable disable
        ) {
            Name = name;
            NameId = nameId;
            Summary = summary;
            Description = description;
            Logo = logo;
            Visible = visible;
            MaturityOption = maturity_option;
            CommunityOptions = community_options;
            MetadataBlob = metadataBlob;
            Tags = tags;
            MonetizationOptions = monetizationOptions;
            Price = price;
            Stock = stock;
        }

        public IReadOnlyDictionary<string, object> GetBodyParameters()
        {
            _bodyParameters.Clear();

            if (!string.IsNullOrEmpty(Name)) _bodyParameters.Add("name", Name);
            if (!string.IsNullOrEmpty(NameId)) _bodyParameters.Add("name_id", NameId);
            if (!string.IsNullOrEmpty(Summary)) _bodyParameters.Add("summary", Summary);
            if (!string.IsNullOrEmpty(Description)) _bodyParameters.Add("description", Description);
            if (Logo != null) _bodyParameters.Add("logo", Logo);
            if (Visible != null) _bodyParameters.Add("visible", Visible);
            if (MaturityOption != null) _bodyParameters.Add("maturity_option", MaturityOption);
            if (CommunityOptions != null) _bodyParameters.Add("community_options", CommunityOptions);
            if (!string.IsNullOrEmpty(MetadataBlob)) _bodyParameters.Add("metadata_blob", MetadataBlob);
            if (Tags != null) _bodyParameters.Add("tags", Tags);
            if (MonetizationOptions != null) _bodyParameters.Add("monetization_options", MonetizationOptions);
            if (Price != null) _bodyParameters.Add("price", Price);
            if (Stock != null) _bodyParameters.Add("stock", Stock);

            return _bodyParameters;
        }
    }
}
