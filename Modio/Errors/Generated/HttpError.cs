// <auto-generated />
namespace Modio.Errors
{
    public enum HttpErrorCode : long
    {
        NONE = ErrorCode.NONE,
        UNKNOWN = ErrorCode.UNKNOWN,
        /// <inheritdoc cref="ErrorCode.HTTP_NOT_INITIALIZED" />
        HTTP_NOT_INITIALIZED = ErrorCode.HTTP_NOT_INITIALIZED,
        /// <inheritdoc cref="ErrorCode.HTTP_ALREADY_INITIALIZED" />
        HTTP_ALREADY_INITIALIZED = ErrorCode.HTTP_ALREADY_INITIALIZED,
        /// <inheritdoc cref="ErrorCode.CANNOT_OPEN_CONNECTION" />
        CANNOT_OPEN_CONNECTION = ErrorCode.CANNOT_OPEN_CONNECTION,
        /// <inheritdoc cref="ErrorCode.INSUFFICIENT_PERMISSIONS" />
        INSUFFICIENT_PERMISSIONS = ErrorCode.INSUFFICIENT_PERMISSIONS,
        /// <inheritdoc cref="ErrorCode.SECURITY_CONFIGURATION_INVALID" />
        SECURITY_CONFIGURATION_INVALID = ErrorCode.SECURITY_CONFIGURATION_INVALID,
        /// <inheritdoc cref="ErrorCode.SERVER_UNAVAILABLE" />
        SERVER_UNAVAILABLE = ErrorCode.SERVER_UNAVAILABLE,
        /// <inheritdoc cref="ErrorCode.RESOURCE_NOT_AVAILABLE" />
        RESOURCE_NOT_AVAILABLE = ErrorCode.RESOURCE_NOT_AVAILABLE,
        /// <inheritdoc cref="ErrorCode.EXCESSIVE_REDIRECTS" />
        EXCESSIVE_REDIRECTS = ErrorCode.EXCESSIVE_REDIRECTS,
        /// <inheritdoc cref="ErrorCode.SERVER_CLOSED_CONNECTION" />
        SERVER_CLOSED_CONNECTION = ErrorCode.SERVER_CLOSED_CONNECTION,
        /// <inheritdoc cref="ErrorCode.DOWNLOAD_NOT_PERMITTED" />
        DOWNLOAD_NOT_PERMITTED = ErrorCode.DOWNLOAD_NOT_PERMITTED,
        /// <inheritdoc cref="ErrorCode.SERVERS_OVERLOADED" />
        SERVERS_OVERLOADED = ErrorCode.SERVERS_OVERLOADED,
        /// <inheritdoc cref="ErrorCode.REQUEST_ERROR" />
        REQUEST_ERROR = ErrorCode.REQUEST_ERROR,
        /// <inheritdoc cref="ErrorCode.INVALID_RESPONSE" />
        INVALID_RESPONSE = ErrorCode.INVALID_RESPONSE,
        /// <inheritdoc cref="ErrorCode.RATE_LIMITED" />
        RATE_LIMITED = ErrorCode.RATE_LIMITED,
    }

    public class HttpError : Error
    {
        public static readonly new HttpError None = new HttpError(HttpErrorCode.NONE);

        public new HttpErrorCode Code => (HttpErrorCode)base.Code;

        public HttpError(HttpErrorCode code) : base((ErrorCode)code){ }
    }

    public static partial class ErrorExtensions
    {
        public static string GetMessage(this HttpErrorCode errorCode, string append = null) => GetMessage((ErrorCode)errorCode, append);
    }
}
