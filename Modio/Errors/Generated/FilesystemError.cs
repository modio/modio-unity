// <auto-generated />
namespace Modio.Errors
{
    public enum FilesystemErrorCode : long
    {
        NONE = ErrorCode.NONE,
        UNKNOWN = ErrorCode.UNKNOWN,
        /// <inheritdoc cref="ErrorCode.UNABLE_TO_CREATE_FOLDER" />
        UNABLE_TO_CREATE_FOLDER = ErrorCode.UNABLE_TO_CREATE_FOLDER,
        /// <inheritdoc cref="ErrorCode.UNABLE_TO_CREATE_FILE" />
        UNABLE_TO_CREATE_FILE = ErrorCode.UNABLE_TO_CREATE_FILE,
        /// <inheritdoc cref="ErrorCode.INSUFFICIENT_SPACE" />
        INSUFFICIENT_SPACE = ErrorCode.INSUFFICIENT_SPACE,
        /// <inheritdoc cref="ErrorCode.NO_PERMISSION" />
        NO_PERMISSION = ErrorCode.NO_PERMISSION,
        /// <inheritdoc cref="ErrorCode.FILE_LOCKED" />
        FILE_LOCKED = ErrorCode.FILE_LOCKED,
        /// <inheritdoc cref="ErrorCode.FILE_NOT_FOUND" />
        FILE_NOT_FOUND = ErrorCode.FILE_NOT_FOUND,
        /// <inheritdoc cref="ErrorCode.DIRECTORY_NOT_EMPTY" />
        DIRECTORY_NOT_EMPTY = ErrorCode.DIRECTORY_NOT_EMPTY,
        /// <inheritdoc cref="ErrorCode.READ_ERROR" />
        READ_ERROR = ErrorCode.READ_ERROR,
        /// <inheritdoc cref="ErrorCode.WRITE_ERROR" />
        WRITE_ERROR = ErrorCode.WRITE_ERROR,
        /// <inheritdoc cref="ErrorCode.DIRECTORY_NOT_FOUND" />
        DIRECTORY_NOT_FOUND = ErrorCode.DIRECTORY_NOT_FOUND,
    }

    public class FilesystemError : Error
    {
        public static readonly new FilesystemError None = new FilesystemError(FilesystemErrorCode.NONE);

        public new FilesystemErrorCode Code => (FilesystemErrorCode)base.Code;

        public FilesystemError(FilesystemErrorCode code) : base((ErrorCode)code){ }
    }

    public static partial class ErrorExtensions
    {
        public static string GetMessage(this FilesystemErrorCode errorCode, string append = null) => GetMessage((ErrorCode)errorCode, append);
    }
}
