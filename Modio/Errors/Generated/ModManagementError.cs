// <auto-generated />
namespace Modio.Errors
{
    public enum ModManagementErrorCode : long
    {
        NONE = ErrorCode.NONE,
        UNKNOWN = ErrorCode.UNKNOWN,
        /// <inheritdoc cref="ErrorCode.ALREADY_SUBSCRIBED" />
        ALREADY_SUBSCRIBED = ErrorCode.ALREADY_SUBSCRIBED,
        /// <inheritdoc cref="ErrorCode.NO_PENDING_WORK" />
        NO_PENDING_WORK = ErrorCode.NO_PENDING_WORK,
        /// <inheritdoc cref="ErrorCode.INSTALL_OR_UPDATE_CANCELLED" />
        INSTALL_OR_UPDATE_CANCELLED = ErrorCode.INSTALL_OR_UPDATE_CANCELLED,
        /// <inheritdoc cref="ErrorCode.MOD_MANAGEMENT_DISABLED" />
        MOD_MANAGEMENT_DISABLED = ErrorCode.MOD_MANAGEMENT_DISABLED,
        /// <inheritdoc cref="ErrorCode.MOD_MANAGEMENT_ALREADY_ENABLED" />
        MOD_MANAGEMENT_ALREADY_ENABLED = ErrorCode.MOD_MANAGEMENT_ALREADY_ENABLED,
        /// <inheritdoc cref="ErrorCode.UPLOAD_CANCELLED" />
        UPLOAD_CANCELLED = ErrorCode.UPLOAD_CANCELLED,
        /// <inheritdoc cref="ErrorCode.MOD_BEING_PROCESSED" />
        MOD_BEING_PROCESSED = ErrorCode.MOD_BEING_PROCESSED,
        /// <inheritdoc cref="ErrorCode.TEMP_MOD_SET_NOT_INITIALIZED" />
        TEMP_MOD_SET_NOT_INITIALIZED = ErrorCode.TEMP_MOD_SET_NOT_INITIALIZED,
        /// <inheritdoc cref="ErrorCode.INCOMPATIBLE_DEPENDENCIES" />
        INCOMPATIBLE_DEPENDENCIES = ErrorCode.INCOMPATIBLE_DEPENDENCIES,
    }

    public class ModManagementError : Error
    {
        public static readonly new ModManagementError None = new ModManagementError(ModManagementErrorCode.NONE);

        public new ModManagementErrorCode Code => (ModManagementErrorCode)base.Code;

        public ModManagementError(ModManagementErrorCode code) : base((ErrorCode)code){ }
    }

    public static partial class ErrorExtensions
    {
        public static string GetMessage(this ModManagementErrorCode errorCode, string append = null) => GetMessage((ErrorCode)errorCode, append);
    }
}
