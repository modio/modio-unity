// <auto-generated />
namespace Modio.Errors
{
    public enum ZlibErrorCode : long
    {
        NONE = ErrorCode.NONE,
        UNKNOWN = ErrorCode.UNKNOWN,
        /// <inheritdoc cref="ErrorCode.NEED_BUFFERS" />
        NEED_BUFFERS = ErrorCode.NEED_BUFFERS,
        /// <inheritdoc cref="ErrorCode.END_OF_STREAM" />
        END_OF_STREAM = ErrorCode.END_OF_STREAM,
        /// <inheritdoc cref="ErrorCode.STREAM_ERROR" />
        STREAM_ERROR = ErrorCode.STREAM_ERROR,
        /// <inheritdoc cref="ErrorCode.INVALID_BLOCK_TYPE" />
        INVALID_BLOCK_TYPE = ErrorCode.INVALID_BLOCK_TYPE,
        /// <inheritdoc cref="ErrorCode.INVALID_STORED_LENGTH" />
        INVALID_STORED_LENGTH = ErrorCode.INVALID_STORED_LENGTH,
        /// <inheritdoc cref="ErrorCode.TOO_MANY_SYMBOLS" />
        TOO_MANY_SYMBOLS = ErrorCode.TOO_MANY_SYMBOLS,
        /// <inheritdoc cref="ErrorCode.INVALID_CODE_LENGTHS" />
        INVALID_CODE_LENGTHS = ErrorCode.INVALID_CODE_LENGTHS,
        /// <inheritdoc cref="ErrorCode.INVALID_BIT_LENGTH_REPEAT" />
        INVALID_BIT_LENGTH_REPEAT = ErrorCode.INVALID_BIT_LENGTH_REPEAT,
        /// <inheritdoc cref="ErrorCode.MISSING_EOB" />
        MISSING_EOB = ErrorCode.MISSING_EOB,
        /// <inheritdoc cref="ErrorCode.INVALID_LITERAL_LENGTH" />
        INVALID_LITERAL_LENGTH = ErrorCode.INVALID_LITERAL_LENGTH,
        /// <inheritdoc cref="ErrorCode.INVALID_DISTANCE_CODE" />
        INVALID_DISTANCE_CODE = ErrorCode.INVALID_DISTANCE_CODE,
        /// <inheritdoc cref="ErrorCode.INVALID_DISTANCE" />
        INVALID_DISTANCE = ErrorCode.INVALID_DISTANCE,
        /// <inheritdoc cref="ErrorCode.OVER_SUBSCRIBED_LENGTH" />
        OVER_SUBSCRIBED_LENGTH = ErrorCode.OVER_SUBSCRIBED_LENGTH,
        /// <inheritdoc cref="ErrorCode.INCOMPLETE_LENGTH_SET" />
        INCOMPLETE_LENGTH_SET = ErrorCode.INCOMPLETE_LENGTH_SET,
    }

    public class ZlibError : Error
    {
        public static readonly new ZlibError None = new ZlibError(ZlibErrorCode.NONE);

        public new ZlibErrorCode Code => (ZlibErrorCode)base.Code;

        public ZlibError(ZlibErrorCode code) : base((ErrorCode)code){ }
    }

    public static partial class ErrorExtensions
    {
        public static string GetMessage(this ZlibErrorCode errorCode, string append = null) => GetMessage((ErrorCode)errorCode, append);
    }
}
