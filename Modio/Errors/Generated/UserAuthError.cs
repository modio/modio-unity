// <auto-generated />
namespace Modio.Errors
{
    public enum UserAuthErrorCode : long
    {
        NONE = ErrorCode.NONE,
        UNKNOWN = ErrorCode.UNKNOWN,
        /// <inheritdoc cref="ErrorCode.UNABLE_TO_INIT_STORAGE" />
        UNABLE_TO_INIT_STORAGE = ErrorCode.UNABLE_TO_INIT_STORAGE,
        /// <inheritdoc cref="ErrorCode.STATUS_AUTH_TOKEN_MISSING" />
        STATUS_AUTH_TOKEN_MISSING = ErrorCode.STATUS_AUTH_TOKEN_MISSING,
        /// <inheritdoc cref="ErrorCode.STATUS_AUTH_TOKEN_INVALID" />
        STATUS_AUTH_TOKEN_INVALID = ErrorCode.STATUS_AUTH_TOKEN_INVALID,
        /// <inheritdoc cref="ErrorCode.NO_AUTH_TOKEN" />
        NO_AUTH_TOKEN = ErrorCode.NO_AUTH_TOKEN,
        /// <inheritdoc cref="ErrorCode.ALREADY_AUTHENTICATED" />
        ALREADY_AUTHENTICATED = ErrorCode.ALREADY_AUTHENTICATED,
        /// <inheritdoc cref="ErrorCode.EMAIL_LOGIN_CODE_EXPIRED" />
        EMAIL_LOGIN_CODE_EXPIRED = ErrorCode.EMAIL_LOGIN_CODE_EXPIRED,
        /// <inheritdoc cref="ErrorCode.EMAIL_LOGIN_CODE_INVALID" />
        EMAIL_LOGIN_CODE_INVALID = ErrorCode.EMAIL_LOGIN_CODE_INVALID,
    }

    public class UserAuthError : Error
    {
        public static readonly new UserAuthError None = new UserAuthError(UserAuthErrorCode.NONE);

        public new UserAuthErrorCode Code => (UserAuthErrorCode)base.Code;

        public UserAuthError(UserAuthErrorCode code) : base((ErrorCode)code){ }
    }

    public static partial class ErrorExtensions
    {
        public static string GetMessage(this UserAuthErrorCode errorCode, string append = null) => GetMessage((ErrorCode)errorCode, append);
    }
}
